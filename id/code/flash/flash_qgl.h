/**** This file is autogenerated. Run GenerateQGL.pl to update it ****/

#include "gl_wrapper.h"

extern void trace( char* fmt, ... );

#ifdef QGL_LOG_GL_CALLS
extern unsigned int QGLLogGLCalls;
extern FILE* QGLDebugFile( void );
#endif

extern void QGLCheckError( const char* message );
extern unsigned int QGLBeginStarted;

// This has to be done to avoid infinite recursion between our glGetError wrapper and QGLCheckError()
inline static GLenum _glGetError( void )
{
    return glGetError();
}

// void glClearIndex( GLfloat c );
inline static void qglClearIndex( GLfloat c )
{
    trace( "glClearIndex( c=%f )\n", c );
}

// void glIndexMask( GLuint mask );
inline static void qglIndexMask( GLuint mask )
{
    trace( "glIndexMask( mask=%lu )\n", mask );
}

// void glColorMask( GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha );
inline static void qglColorMask( GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha )
{
    trace( "glColorMask( red=%u, green=%u, blue=%u, alpha=%u )\n", red, green, blue, alpha );
}

// void glLogicOp( GLenum opcode );
inline static void qglLogicOp( GLenum opcode )
{
    trace( "glLogicOp( opcode=%lu )\n", opcode );
}

// void glFrontFace( GLenum mode );
inline static void qglFrontFace( GLenum mode )
{
    trace( "glFrontFace( mode=%lu )\n", mode );
}

// void glPointSize( GLfloat size );
inline static void qglPointSize( GLfloat size )
{
    trace( "glPointSize( size=%f )\n", size );
}

// void glLineWidth( GLfloat width );
inline static void qglLineWidth( GLfloat width )
{
    trace( "glLineWidth( width=%f )\n", width );
}

// void glLineStipple( GLint factor, GLushort pattern );
inline static void qglLineStipple( GLint factor, GLushort pattern )
{
    trace( "glLineStipple( factor=%ld, pattern=%u )\n", factor, pattern );
}

// void glPolygonStipple( GLubyte *mask );
inline static void qglPolygonStipple( GLubyte *mask )
{
    trace( "glPolygonStipple( mask=%p )\n", mask );
}

// void glGetPolygonStipple( GLubyte *mask );
inline static void qglGetPolygonStipple( GLubyte *mask )
{
    trace( "glGetPolygonStipple( mask=%p )\n", mask );
}

// void glEdgeFlag( GLboolean flag );
inline static void qglEdgeFlag( GLboolean flag )
{
    trace( "glEdgeFlag( flag=%u )\n", flag );
}

// void glEdgeFlagv( GLboolean *flag );
inline static void qglEdgeFlagv( GLboolean *flag )
{
    trace( "glEdgeFlagv( flag=%p )\n", flag );
}

// void glClipPlane( GLenum plane, GLdouble *equation );
inline static void qglClipPlane( GLenum plane, GLdouble *equation )
{
    trace( "glClipPlane( plane=%lu, equation=%p )\n", plane, equation );
}

// void glGetClipPlane( GLenum plane, GLdouble *equation );
inline static void qglGetClipPlane( GLenum plane, GLdouble *equation )
{
    trace( "glGetClipPlane( plane=%lu, equation=%p )\n", plane, equation );
}

// void glReadBuffer( GLenum mode );
inline static void qglReadBuffer( GLenum mode )
{
    trace( "glReadBuffer( mode=%lu )\n", mode );
}

// GLboolean glIsEnabled( GLenum cap );
inline static GLboolean qglIsEnabled( GLenum cap )
{
    GLboolean returnValue;
    trace( "glIsEnabled( cap=%lu )\n", cap );
    return returnValue;
}

// void glGetBooleanv( GLenum pname, GLboolean *params );
inline static void qglGetBooleanv( GLenum pname, GLboolean *params )
{
    trace( "glGetBooleanv( pname=%lu, params=%p )\n", pname, params );
}

// void glGetDoublev( GLenum pname, GLdouble *params );
inline static void qglGetDoublev( GLenum pname, GLdouble *params )
{
    trace( "glGetDoublev( pname=%lu, params=%p )\n", pname, params );
}

// void glGetFloatv( GLenum pname, GLfloat *params );
inline static void qglGetFloatv( GLenum pname, GLfloat *params )
{
    trace( "glGetFloatv( pname=%lu, params=%p )\n", pname, params );
}

// void glPushAttrib( GLbitfield mask );
inline static void qglPushAttrib( GLbitfield mask )
{
    trace( "glPushAttrib( mask=%lu )\n", mask );
}

// void glPopAttrib();
inline static void qglPopAttrib()
{
    trace( "glPopAttrib( void )\n" );
}

// void glPushClientAttrib( GLbitfield mask );
inline static void qglPushClientAttrib( GLbitfield mask )
{
    trace( "glPushClientAttrib( mask=%lu )\n", mask );
}

// void glPopClientAttrib();
inline static void qglPopClientAttrib()
{
    trace( "glPopClientAttrib( void )\n" );
}

// GLint glRenderMode( GLenum mode );
inline static GLint qglRenderMode( GLenum mode )
{
    GLint returnValue;
    trace( "glRenderMode( mode=%lu )\n", mode );
    return returnValue;
}

// void glHint( GLenum target, GLenum mode );
inline static void qglHint( GLenum target, GLenum mode )
{
    trace( "glHint( target=%lu, mode=%lu )\n", target, mode );
}

// void glClearAccum( GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha );
inline static void qglClearAccum( GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha )
{
    trace( "glClearAccum( red=%f, green=%f, blue=%f, alpha=%f )\n", red, green, blue, alpha );
}

// void glAccum( GLenum op, GLfloat value );
inline static void qglAccum( GLenum op, GLfloat value )
{
    trace( "glAccum( op=%lu, value=%f )\n", op, value );
}

// void glFrustum( GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble near_val, GLdouble far_val );
inline static void qglFrustum( GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble near_val, GLdouble far_val )
{
    trace( "glFrustum( left=%f, right=%f, bottom=%f, top=%f, near_val=%f, far_val=%f )\n", left, right, bottom, top, near_val, far_val );
}

// void glPushMatrix();
inline static void qglPushMatrix()
{
    trace( "glPushMatrix( void )\n" );
}

// void glPopMatrix();
inline static void qglPopMatrix()
{
    trace( "glPopMatrix( void )\n" );
}

// void glLoadMatrixd( GLdouble *m );
inline static void qglLoadMatrixd( GLdouble *m )
{
    trace( "glLoadMatrixd( m=%p )\n", m );
}

// void glMultMatrixd( GLdouble *m );
inline static void qglMultMatrixd( GLdouble *m )
{
    trace( "glMultMatrixd( m=%p )\n", m );
}

// void glMultMatrixf( GLfloat *m );
inline static void qglMultMatrixf( GLfloat *m )
{
    trace( "glMultMatrixf( m=%p )\n", m );
}

// void glRotated( GLdouble angle, GLdouble x, GLdouble y, GLdouble z );
inline static void qglRotated( GLdouble angle, GLdouble x, GLdouble y, GLdouble z )
{
    trace( "glRotated( angle=%f, x=%f, y=%f, z=%f )\n", angle, x, y, z );
}

// void glRotatef( GLfloat angle, GLfloat x, GLfloat y, GLfloat z );
inline static void qglRotatef( GLfloat angle, GLfloat x, GLfloat y, GLfloat z )
{
    trace( "glRotatef( angle=%f, x=%f, y=%f, z=%f )\n", angle, x, y, z );
}

// void glScaled( GLdouble x, GLdouble y, GLdouble z );
inline static void qglScaled( GLdouble x, GLdouble y, GLdouble z )
{
    trace( "glScaled( x=%f, y=%f, z=%f )\n", x, y, z );
}

// void glScalef( GLfloat x, GLfloat y, GLfloat z );
inline static void qglScalef( GLfloat x, GLfloat y, GLfloat z )
{
    trace( "glScalef( x=%f, y=%f, z=%f )\n", x, y, z );
}

// void glTranslated( GLdouble x, GLdouble y, GLdouble z );
inline static void qglTranslated( GLdouble x, GLdouble y, GLdouble z )
{
    trace( "glTranslated( x=%f, y=%f, z=%f )\n", x, y, z );
}

// void glTranslatef( GLfloat x, GLfloat y, GLfloat z );
inline static void qglTranslatef( GLfloat x, GLfloat y, GLfloat z )
{
    trace( "glTranslatef( x=%f, y=%f, z=%f )\n", x, y, z );
}

// GLboolean glIsList( GLuint list );
inline static GLboolean qglIsList( GLuint list )
{
    GLboolean returnValue;
    trace( "glIsList( list=%lu )\n", list );
    return returnValue;
}

// void glDeleteLists( GLuint list, GLsizei range );
inline static void qglDeleteLists( GLuint list, GLsizei range )
{
    trace( "glDeleteLists( list=%lu, range=%ld )\n", list, range );
}

// GLuint glGenLists( GLsizei range );
inline static GLuint qglGenLists( GLsizei range )
{
    GLuint returnValue;
    trace( "glGenLists( range=%ld )\n", range );
    return returnValue;
}

// void glNewList( GLuint list, GLenum mode );
inline static void qglNewList( GLuint list, GLenum mode )
{
    trace( "glNewList( list=%lu, mode=%lu )\n", list, mode );
}

// void glEndList();
inline static void qglEndList()
{
    trace( "glEndList( void )\n" );
}

// void glCallList( GLuint list );
inline static void qglCallList( GLuint list )
{
    trace( "glCallList( list=%lu )\n", list );
}

// void glCallLists( GLsizei n, GLenum type, GLvoid *lists );
inline static void qglCallLists( GLsizei n, GLenum type, GLvoid *lists )
{
    trace( "glCallLists( n=%ld, type=%lu, lists=%p )\n", n, type, lists );
}

// void glListBase( GLuint base );
inline static void qglListBase( GLuint base )
{
    trace( "glListBase( base=%lu )\n", base );
}

// void glVertex2d( GLdouble x, GLdouble y );
inline static void qglVertex2d( GLdouble x, GLdouble y )
{
    trace( "glVertex2d( x=%f, y=%f )\n", x, y );
}

// void glVertex2i( GLint x, GLint y );
inline static void qglVertex2i( GLint x, GLint y )
{
    trace( "glVertex2i( x=%ld, y=%ld )\n", x, y );
}

// void glVertex2s( GLshort x, GLshort y );
inline static void qglVertex2s( GLshort x, GLshort y )
{
    trace( "glVertex2s( x=%d, y=%d )\n", x, y );
}

// void glVertex3d( GLdouble x, GLdouble y, GLdouble z );
inline static void qglVertex3d( GLdouble x, GLdouble y, GLdouble z )
{
    trace( "glVertex3d( x=%f, y=%f, z=%f )\n", x, y, z );
}

// void glVertex3f( GLfloat x, GLfloat y, GLfloat z );
inline static void qglVertex3f( GLfloat x, GLfloat y, GLfloat z )
{
    trace( "glVertex3f( x=%f, y=%f, z=%f )\n", x, y, z );
}

// void glVertex3i( GLint x, GLint y, GLint z );
inline static void qglVertex3i( GLint x, GLint y, GLint z )
{
    trace( "glVertex3i( x=%ld, y=%ld, z=%ld )\n", x, y, z );
}

// void glVertex3s( GLshort x, GLshort y, GLshort z );
inline static void qglVertex3s( GLshort x, GLshort y, GLshort z )
{
    trace( "glVertex3s( x=%d, y=%d, z=%d )\n", x, y, z );
}

// void glVertex4d( GLdouble x, GLdouble y, GLdouble z, GLdouble w );
inline static void qglVertex4d( GLdouble x, GLdouble y, GLdouble z, GLdouble w )
{
    trace( "glVertex4d( x=%f, y=%f, z=%f, w=%f )\n", x, y, z, w );
}

// void glVertex4f( GLfloat x, GLfloat y, GLfloat z, GLfloat w );
inline static void qglVertex4f( GLfloat x, GLfloat y, GLfloat z, GLfloat w )
{
    trace( "glVertex4f( x=%f, y=%f, z=%f, w=%f )\n", x, y, z, w );
}

// void glVertex4i( GLint x, GLint y, GLint z, GLint w );
inline static void qglVertex4i( GLint x, GLint y, GLint z, GLint w )
{
    trace( "glVertex4i( x=%ld, y=%ld, z=%ld, w=%ld )\n", x, y, z, w );
}

// void glVertex4s( GLshort x, GLshort y, GLshort z, GLshort w );
inline static void qglVertex4s( GLshort x, GLshort y, GLshort z, GLshort w )
{
    trace( "glVertex4s( x=%d, y=%d, z=%d, w=%d )\n", x, y, z, w );
}

// void glVertex2dv( GLdouble *v );
inline static void qglVertex2dv( GLdouble *v )
{
    trace( "glVertex2dv( v=%p )\n", v );
}

// void glVertex2fv( GLfloat *v );
inline static void qglVertex2fv( GLfloat *v )
{
    trace( "glVertex2fv( v=%p )\n", v );
}

// void glVertex2iv( GLint *v );
inline static void qglVertex2iv( GLint *v )
{
    trace( "glVertex2iv( v=%p )\n", v );
}

// void glVertex2sv( GLshort *v );
inline static void qglVertex2sv( GLshort *v )
{
    trace( "glVertex2sv( v=%p )\n", v );
}

// void glVertex3dv( GLdouble *v );
inline static void qglVertex3dv( GLdouble *v )
{
    trace( "glVertex3dv( v=%p )\n", v );
}

// void glVertex3iv( GLint *v );
inline static void qglVertex3iv( GLint *v )
{
    trace( "glVertex3iv( v=%p )\n", v );
}

// void glVertex3sv( GLshort *v );
inline static void qglVertex3sv( GLshort *v )
{
    trace( "glVertex3sv( v=%p )\n", v );
}

// void glVertex4dv( GLdouble *v );
inline static void qglVertex4dv( GLdouble *v )
{
    trace( "glVertex4dv( v=%p )\n", v );
}

// void glVertex4fv( GLfloat *v );
inline static void qglVertex4fv( GLfloat *v )
{
    trace( "glVertex4fv( v=%p )\n", v );
}

// void glVertex4iv( GLint *v );
inline static void qglVertex4iv( GLint *v )
{
    trace( "glVertex4iv( v=%p )\n", v );
}

// void glVertex4sv( GLshort *v );
inline static void qglVertex4sv( GLshort *v )
{
    trace( "glVertex4sv( v=%p )\n", v );
}

// void glNormal3b( GLbyte nx, GLbyte ny, GLbyte nz );
inline static void qglNormal3b( GLbyte nx, GLbyte ny, GLbyte nz )
{
    trace( "glNormal3b( nx=%d, ny=%d, nz=%d )\n", nx, ny, nz );
}

// void glNormal3d( GLdouble nx, GLdouble ny, GLdouble nz );
inline static void qglNormal3d( GLdouble nx, GLdouble ny, GLdouble nz )
{
    trace( "glNormal3d( nx=%f, ny=%f, nz=%f )\n", nx, ny, nz );
}

// void glNormal3f( GLfloat nx, GLfloat ny, GLfloat nz );
inline static void qglNormal3f( GLfloat nx, GLfloat ny, GLfloat nz )
{
    trace( "glNormal3f( nx=%f, ny=%f, nz=%f )\n", nx, ny, nz );
}

// void glNormal3i( GLint nx, GLint ny, GLint nz );
inline static void qglNormal3i( GLint nx, GLint ny, GLint nz )
{
    trace( "glNormal3i( nx=%ld, ny=%ld, nz=%ld )\n", nx, ny, nz );
}

// void glNormal3s( GLshort nx, GLshort ny, GLshort nz );
inline static void qglNormal3s( GLshort nx, GLshort ny, GLshort nz )
{
    trace( "glNormal3s( nx=%d, ny=%d, nz=%d )\n", nx, ny, nz );
}

// void glNormal3bv( GLbyte *v );
inline static void qglNormal3bv( GLbyte *v )
{
    trace( "glNormal3bv( v=%p )\n", v );
}

// void glNormal3dv( GLdouble *v );
inline static void qglNormal3dv( GLdouble *v )
{
    trace( "glNormal3dv( v=%p )\n", v );
}

// void glNormal3fv( GLfloat *v );
inline static void qglNormal3fv( GLfloat *v )
{
    trace( "glNormal3fv( v=%p )\n", v );
}

// void glNormal3iv( GLint *v );
inline static void qglNormal3iv( GLint *v )
{
    trace( "glNormal3iv( v=%p )\n", v );
}

// void glNormal3sv( GLshort *v );
inline static void qglNormal3sv( GLshort *v )
{
    trace( "glNormal3sv( v=%p )\n", v );
}

// void glIndexd( GLdouble c );
inline static void qglIndexd( GLdouble c )
{
    trace( "glIndexd( c=%f )\n", c );
}

// void glIndexf( GLfloat c );
inline static void qglIndexf( GLfloat c )
{
    trace( "glIndexf( c=%f )\n", c );
}

// void glIndexi( GLint c );
inline static void qglIndexi( GLint c )
{
    trace( "glIndexi( c=%ld )\n", c );
}

// void glIndexs( GLshort c );
inline static void qglIndexs( GLshort c )
{
    trace( "glIndexs( c=%d )\n", c );
}

// void glIndexub( GLubyte c );
inline static void qglIndexub( GLubyte c )
{
    trace( "glIndexub( c=%u )\n", c );
}

// void glIndexdv( GLdouble *c );
inline static void qglIndexdv( GLdouble *c )
{
    trace( "glIndexdv( c=%p )\n", c );
}

// void glIndexfv( GLfloat *c );
inline static void qglIndexfv( GLfloat *c )
{
    trace( "glIndexfv( c=%p )\n", c );
}

// void glIndexiv( GLint *c );
inline static void qglIndexiv( GLint *c )
{
    trace( "glIndexiv( c=%p )\n", c );
}

// void glIndexsv( GLshort *c );
inline static void qglIndexsv( GLshort *c )
{
    trace( "glIndexsv( c=%p )\n", c );
}

// void glIndexubv( GLubyte *c );
inline static void qglIndexubv( GLubyte *c )
{
    trace( "glIndexubv( c=%p )\n", c );
}

// void glColor3b( GLbyte red, GLbyte green, GLbyte blue );
inline static void qglColor3b( GLbyte red, GLbyte green, GLbyte blue )
{
    trace( "glColor3b( red=%d, green=%d, blue=%d )\n", red, green, blue );
}

// void glColor3d( GLdouble red, GLdouble green, GLdouble blue );
inline static void qglColor3d( GLdouble red, GLdouble green, GLdouble blue )
{
    trace( "glColor3d( red=%f, green=%f, blue=%f )\n", red, green, blue );
}

// void glColor3i( GLint red, GLint green, GLint blue );
inline static void qglColor3i( GLint red, GLint green, GLint blue )
{
    trace( "glColor3i( red=%ld, green=%ld, blue=%ld )\n", red, green, blue );
}

// void glColor3s( GLshort red, GLshort green, GLshort blue );
inline static void qglColor3s( GLshort red, GLshort green, GLshort blue )
{
    trace( "glColor3s( red=%d, green=%d, blue=%d )\n", red, green, blue );
}

// void glColor3ub( GLubyte red, GLubyte green, GLubyte blue );
inline static void qglColor3ub( GLubyte red, GLubyte green, GLubyte blue )
{
    trace( "glColor3ub( red=%u, green=%u, blue=%u )\n", red, green, blue );
}

// void glColor3ui( GLuint red, GLuint green, GLuint blue );
inline static void qglColor3ui( GLuint red, GLuint green, GLuint blue )
{
    trace( "glColor3ui( red=%lu, green=%lu, blue=%lu )\n", red, green, blue );
}

// void glColor3us( GLushort red, GLushort green, GLushort blue );
inline static void qglColor3us( GLushort red, GLushort green, GLushort blue )
{
    trace( "glColor3us( red=%u, green=%u, blue=%u )\n", red, green, blue );
}

// void glColor4b( GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha );
inline static void qglColor4b( GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha )
{
    trace( "glColor4b( red=%d, green=%d, blue=%d, alpha=%d )\n", red, green, blue, alpha );
}

// void glColor4d( GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha );
inline static void qglColor4d( GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha )
{
    trace( "glColor4d( red=%f, green=%f, blue=%f, alpha=%f )\n", red, green, blue, alpha );
}

// void glColor4i( GLint red, GLint green, GLint blue, GLint alpha );
inline static void qglColor4i( GLint red, GLint green, GLint blue, GLint alpha )
{
    trace( "glColor4i( red=%ld, green=%ld, blue=%ld, alpha=%ld )\n", red, green, blue, alpha );
}

// void glColor4s( GLshort red, GLshort green, GLshort blue, GLshort alpha );
inline static void qglColor4s( GLshort red, GLshort green, GLshort blue, GLshort alpha )
{
    trace( "glColor4s( red=%d, green=%d, blue=%d, alpha=%d )\n", red, green, blue, alpha );
}

// void glColor4ub( GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha );
inline static void qglColor4ub( GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha )
{
    trace( "glColor4ub( red=%u, green=%u, blue=%u, alpha=%u )\n", red, green, blue, alpha );
}

// void glColor4ui( GLuint red, GLuint green, GLuint blue, GLuint alpha );
inline static void qglColor4ui( GLuint red, GLuint green, GLuint blue, GLuint alpha )
{
    trace( "glColor4ui( red=%lu, green=%lu, blue=%lu, alpha=%lu )\n", red, green, blue, alpha );
}

// void glColor4us( GLushort red, GLushort green, GLushort blue, GLushort alpha );
inline static void qglColor4us( GLushort red, GLushort green, GLushort blue, GLushort alpha )
{
    trace( "glColor4us( red=%u, green=%u, blue=%u, alpha=%u )\n", red, green, blue, alpha );
}

// void glColor3bv( GLbyte *v );
inline static void qglColor3bv( GLbyte *v )
{
    trace( "glColor3bv( v=%p )\n", v );
}

// void glColor3dv( GLdouble *v );
inline static void qglColor3dv( GLdouble *v )
{
    trace( "glColor3dv( v=%p )\n", v );
}

// void glColor3fv( GLfloat *v );
inline static void qglColor3fv( GLfloat *v )
{
    trace( "glColor3fv( v=%p )\n", v );
}

// void glColor3iv( GLint *v );
inline static void qglColor3iv( GLint *v )
{
    trace( "glColor3iv( v=%p )\n", v );
}

// void glColor3sv( GLshort *v );
inline static void qglColor3sv( GLshort *v )
{
    trace( "glColor3sv( v=%p )\n", v );
}

// void glColor3ubv( GLubyte *v );
inline static void qglColor3ubv( GLubyte *v )
{
    trace( "glColor3ubv( v=%p )\n", v );
}

// void glColor3uiv( GLuint *v );
inline static void qglColor3uiv( GLuint *v )
{
    trace( "glColor3uiv( v=%p )\n", v );
}

// void glColor3usv( GLushort *v );
inline static void qglColor3usv( GLushort *v )
{
    trace( "glColor3usv( v=%p )\n", v );
}

// void glColor4bv( GLbyte *v );
inline static void qglColor4bv( GLbyte *v )
{
    trace( "glColor4bv( v=%p )\n", v );
}

// void glColor4dv( GLdouble *v );
inline static void qglColor4dv( GLdouble *v )
{
    trace( "glColor4dv( v=%p )\n", v );
}

// void glColor4fv( GLfloat *v );
inline static void qglColor4fv( GLfloat *v )
{
    trace( "glColor4fv( v=%p )\n", v );
}

// void glColor4iv( GLint *v );
inline static void qglColor4iv( GLint *v )
{
    trace( "glColor4iv( v=%p )\n", v );
}

// void glColor4sv( GLshort *v );
inline static void qglColor4sv( GLshort *v )
{
    trace( "glColor4sv( v=%p )\n", v );
}

// void glColor4uiv( GLuint *v );
inline static void qglColor4uiv( GLuint *v )
{
    trace( "glColor4uiv( v=%p )\n", v );
}

// void glColor4usv( GLushort *v );
inline static void qglColor4usv( GLushort *v )
{
    trace( "glColor4usv( v=%p )\n", v );
}

// void glTexCoord1d( GLdouble s );
inline static void qglTexCoord1d( GLdouble s )
{
    trace( "glTexCoord1d( s=%f )\n", s );
}

// void glTexCoord1f( GLfloat s );
inline static void qglTexCoord1f( GLfloat s )
{
    trace( "glTexCoord1f( s=%f )\n", s );
}

// void glTexCoord1i( GLint s );
inline static void qglTexCoord1i( GLint s )
{
    trace( "glTexCoord1i( s=%ld )\n", s );
}

// void glTexCoord1s( GLshort s );
inline static void qglTexCoord1s( GLshort s )
{
    trace( "glTexCoord1s( s=%d )\n", s );
}

// void glTexCoord2d( GLdouble s, GLdouble t );
inline static void qglTexCoord2d( GLdouble s, GLdouble t )
{
    trace( "glTexCoord2d( s=%f, t=%f )\n", s, t );
}

// void glTexCoord2i( GLint s, GLint t );
inline static void qglTexCoord2i( GLint s, GLint t )
{
    trace( "glTexCoord2i( s=%ld, t=%ld )\n", s, t );
}

// void glTexCoord2s( GLshort s, GLshort t );
inline static void qglTexCoord2s( GLshort s, GLshort t )
{
    trace( "glTexCoord2s( s=%d, t=%d )\n", s, t );
}

// void glTexCoord3d( GLdouble s, GLdouble t, GLdouble r );
inline static void qglTexCoord3d( GLdouble s, GLdouble t, GLdouble r )
{
    trace( "glTexCoord3d( s=%f, t=%f, r=%f )\n", s, t, r );
}

// void glTexCoord3f( GLfloat s, GLfloat t, GLfloat r );
inline static void qglTexCoord3f( GLfloat s, GLfloat t, GLfloat r )
{
    trace( "glTexCoord3f( s=%f, t=%f, r=%f )\n", s, t, r );
}

// void glTexCoord3i( GLint s, GLint t, GLint r );
inline static void qglTexCoord3i( GLint s, GLint t, GLint r )
{
    trace( "glTexCoord3i( s=%ld, t=%ld, r=%ld )\n", s, t, r );
}

// void glTexCoord3s( GLshort s, GLshort t, GLshort r );
inline static void qglTexCoord3s( GLshort s, GLshort t, GLshort r )
{
    trace( "glTexCoord3s( s=%d, t=%d, r=%d )\n", s, t, r );
}

// void glTexCoord4d( GLdouble s, GLdouble t, GLdouble r, GLdouble q );
inline static void qglTexCoord4d( GLdouble s, GLdouble t, GLdouble r, GLdouble q )
{
    trace( "glTexCoord4d( s=%f, t=%f, r=%f, q=%f )\n", s, t, r, q );
}

// void glTexCoord4f( GLfloat s, GLfloat t, GLfloat r, GLfloat q );
inline static void qglTexCoord4f( GLfloat s, GLfloat t, GLfloat r, GLfloat q )
{
    trace( "glTexCoord4f( s=%f, t=%f, r=%f, q=%f )\n", s, t, r, q );
}

// void glTexCoord4i( GLint s, GLint t, GLint r, GLint q );
inline static void qglTexCoord4i( GLint s, GLint t, GLint r, GLint q )
{
    trace( "glTexCoord4i( s=%ld, t=%ld, r=%ld, q=%ld )\n", s, t, r, q );
}

// void glTexCoord4s( GLshort s, GLshort t, GLshort r, GLshort q );
inline static void qglTexCoord4s( GLshort s, GLshort t, GLshort r, GLshort q )
{
    trace( "glTexCoord4s( s=%d, t=%d, r=%d, q=%d )\n", s, t, r, q );
}

// void glTexCoord1dv( GLdouble *v );
inline static void qglTexCoord1dv( GLdouble *v )
{
    trace( "glTexCoord1dv( v=%p )\n", v );
}

// void glTexCoord1fv( GLfloat *v );
inline static void qglTexCoord1fv( GLfloat *v )
{
    trace( "glTexCoord1fv( v=%p )\n", v );
}

// void glTexCoord1iv( GLint *v );
inline static void qglTexCoord1iv( GLint *v )
{
    trace( "glTexCoord1iv( v=%p )\n", v );
}

// void glTexCoord1sv( GLshort *v );
inline static void qglTexCoord1sv( GLshort *v )
{
    trace( "glTexCoord1sv( v=%p )\n", v );
}

// void glTexCoord2dv( GLdouble *v );
inline static void qglTexCoord2dv( GLdouble *v )
{
    trace( "glTexCoord2dv( v=%p )\n", v );
}

// void glTexCoord2iv( GLint *v );
inline static void qglTexCoord2iv( GLint *v )
{
    trace( "glTexCoord2iv( v=%p )\n", v );
}

// void glTexCoord2sv( GLshort *v );
inline static void qglTexCoord2sv( GLshort *v )
{
    trace( "glTexCoord2sv( v=%p )\n", v );
}

// void glTexCoord3dv( GLdouble *v );
inline static void qglTexCoord3dv( GLdouble *v )
{
    trace( "glTexCoord3dv( v=%p )\n", v );
}

// void glTexCoord3fv( GLfloat *v );
inline static void qglTexCoord3fv( GLfloat *v )
{
    trace( "glTexCoord3fv( v=%p )\n", v );
}

// void glTexCoord3iv( GLint *v );
inline static void qglTexCoord3iv( GLint *v )
{
    trace( "glTexCoord3iv( v=%p )\n", v );
}

// void glTexCoord3sv( GLshort *v );
inline static void qglTexCoord3sv( GLshort *v )
{
    trace( "glTexCoord3sv( v=%p )\n", v );
}

// void glTexCoord4dv( GLdouble *v );
inline static void qglTexCoord4dv( GLdouble *v )
{
    trace( "glTexCoord4dv( v=%p )\n", v );
}

// void glTexCoord4fv( GLfloat *v );
inline static void qglTexCoord4fv( GLfloat *v )
{
    trace( "glTexCoord4fv( v=%p )\n", v );
}

// void glTexCoord4iv( GLint *v );
inline static void qglTexCoord4iv( GLint *v )
{
    trace( "glTexCoord4iv( v=%p )\n", v );
}

// void glTexCoord4sv( GLshort *v );
inline static void qglTexCoord4sv( GLshort *v )
{
    trace( "glTexCoord4sv( v=%p )\n", v );
}

// void glRasterPos2d( GLdouble x, GLdouble y );
inline static void qglRasterPos2d( GLdouble x, GLdouble y )
{
    trace( "glRasterPos2d( x=%f, y=%f )\n", x, y );
}

// void glRasterPos2f( GLfloat x, GLfloat y );
inline static void qglRasterPos2f( GLfloat x, GLfloat y )
{
    trace( "glRasterPos2f( x=%f, y=%f )\n", x, y );
}

// void glRasterPos2i( GLint x, GLint y );
inline static void qglRasterPos2i( GLint x, GLint y )
{
    trace( "glRasterPos2i( x=%ld, y=%ld )\n", x, y );
}

// void glRasterPos2s( GLshort x, GLshort y );
inline static void qglRasterPos2s( GLshort x, GLshort y )
{
    trace( "glRasterPos2s( x=%d, y=%d )\n", x, y );
}

// void glRasterPos3d( GLdouble x, GLdouble y, GLdouble z );
inline static void qglRasterPos3d( GLdouble x, GLdouble y, GLdouble z )
{
    trace( "glRasterPos3d( x=%f, y=%f, z=%f )\n", x, y, z );
}

// void glRasterPos3f( GLfloat x, GLfloat y, GLfloat z );
inline static void qglRasterPos3f( GLfloat x, GLfloat y, GLfloat z )
{
    trace( "glRasterPos3f( x=%f, y=%f, z=%f )\n", x, y, z );
}

// void glRasterPos3i( GLint x, GLint y, GLint z );
inline static void qglRasterPos3i( GLint x, GLint y, GLint z )
{
    trace( "glRasterPos3i( x=%ld, y=%ld, z=%ld )\n", x, y, z );
}

// void glRasterPos3s( GLshort x, GLshort y, GLshort z );
inline static void qglRasterPos3s( GLshort x, GLshort y, GLshort z )
{
    trace( "glRasterPos3s( x=%d, y=%d, z=%d )\n", x, y, z );
}

// void glRasterPos4d( GLdouble x, GLdouble y, GLdouble z, GLdouble w );
inline static void qglRasterPos4d( GLdouble x, GLdouble y, GLdouble z, GLdouble w )
{
    trace( "glRasterPos4d( x=%f, y=%f, z=%f, w=%f )\n", x, y, z, w );
}

// void glRasterPos4f( GLfloat x, GLfloat y, GLfloat z, GLfloat w );
inline static void qglRasterPos4f( GLfloat x, GLfloat y, GLfloat z, GLfloat w )
{
    trace( "glRasterPos4f( x=%f, y=%f, z=%f, w=%f )\n", x, y, z, w );
}

// void glRasterPos4i( GLint x, GLint y, GLint z, GLint w );
inline static void qglRasterPos4i( GLint x, GLint y, GLint z, GLint w )
{
    trace( "glRasterPos4i( x=%ld, y=%ld, z=%ld, w=%ld )\n", x, y, z, w );
}

// void glRasterPos4s( GLshort x, GLshort y, GLshort z, GLshort w );
inline static void qglRasterPos4s( GLshort x, GLshort y, GLshort z, GLshort w )
{
    trace( "glRasterPos4s( x=%d, y=%d, z=%d, w=%d )\n", x, y, z, w );
}

// void glRasterPos2dv( GLdouble *v );
inline static void qglRasterPos2dv( GLdouble *v )
{
    trace( "glRasterPos2dv( v=%p )\n", v );
}

// void glRasterPos2fv( GLfloat *v );
inline static void qglRasterPos2fv( GLfloat *v )
{
    trace( "glRasterPos2fv( v=%p )\n", v );
}

// void glRasterPos2iv( GLint *v );
inline static void qglRasterPos2iv( GLint *v )
{
    trace( "glRasterPos2iv( v=%p )\n", v );
}

// void glRasterPos2sv( GLshort *v );
inline static void qglRasterPos2sv( GLshort *v )
{
    trace( "glRasterPos2sv( v=%p )\n", v );
}

// void glRasterPos3dv( GLdouble *v );
inline static void qglRasterPos3dv( GLdouble *v )
{
    trace( "glRasterPos3dv( v=%p )\n", v );
}

// void glRasterPos3fv( GLfloat *v );
inline static void qglRasterPos3fv( GLfloat *v )
{
    trace( "glRasterPos3fv( v=%p )\n", v );
}

// void glRasterPos3iv( GLint *v );
inline static void qglRasterPos3iv( GLint *v )
{
    trace( "glRasterPos3iv( v=%p )\n", v );
}

// void glRasterPos3sv( GLshort *v );
inline static void qglRasterPos3sv( GLshort *v )
{
    trace( "glRasterPos3sv( v=%p )\n", v );
}

// void glRasterPos4dv( GLdouble *v );
inline static void qglRasterPos4dv( GLdouble *v )
{
    trace( "glRasterPos4dv( v=%p )\n", v );
}

// void glRasterPos4fv( GLfloat *v );
inline static void qglRasterPos4fv( GLfloat *v )
{
    trace( "glRasterPos4fv( v=%p )\n", v );
}

// void glRasterPos4iv( GLint *v );
inline static void qglRasterPos4iv( GLint *v )
{
    trace( "glRasterPos4iv( v=%p )\n", v );
}

// void glRasterPos4sv( GLshort *v );
inline static void qglRasterPos4sv( GLshort *v )
{
    trace( "glRasterPos4sv( v=%p )\n", v );
}

// void glRectd( GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2 );
inline static void qglRectd( GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2 )
{
    trace( "glRectd( x1=%f, y1=%f, x2=%f, y2=%f )\n", x1, y1, x2, y2 );
}

// void glRectf( GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2 );
inline static void qglRectf( GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2 )
{
    trace( "glRectf( x1=%f, y1=%f, x2=%f, y2=%f )\n", x1, y1, x2, y2 );
}

// void glRecti( GLint x1, GLint y1, GLint x2, GLint y2 );
inline static void qglRecti( GLint x1, GLint y1, GLint x2, GLint y2 )
{
    trace( "glRecti( x1=%ld, y1=%ld, x2=%ld, y2=%ld )\n", x1, y1, x2, y2 );
}

// void glRects( GLshort x1, GLshort y1, GLshort x2, GLshort y2 );
inline static void qglRects( GLshort x1, GLshort y1, GLshort x2, GLshort y2 )
{
    trace( "glRects( x1=%d, y1=%d, x2=%d, y2=%d )\n", x1, y1, x2, y2 );
}

// void glRectdv( GLdouble *v1, GLdouble *v2 );
inline static void qglRectdv( GLdouble *v1, GLdouble *v2 )
{
    trace( "glRectdv( v1=%p, v2=%p )\n", v1, v2 );
}

// void glRectfv( GLfloat *v1, GLfloat *v2 );
inline static void qglRectfv( GLfloat *v1, GLfloat *v2 )
{
    trace( "glRectfv( v1=%p, v2=%p )\n", v1, v2 );
}

// void glRectiv( GLint *v1, GLint *v2 );
inline static void qglRectiv( GLint *v1, GLint *v2 )
{
    trace( "glRectiv( v1=%p, v2=%p )\n", v1, v2 );
}

// void glRectsv( GLshort *v1, GLshort *v2 );
inline static void qglRectsv( GLshort *v1, GLshort *v2 )
{
    trace( "glRectsv( v1=%p, v2=%p )\n", v1, v2 );
}

// void glNormalPointer( GLenum type, GLsizei stride, GLvoid *ptr );
inline static void qglNormalPointer( GLenum type, GLsizei stride, GLvoid *ptr )
{
    trace( "glNormalPointer( type=%lu, stride=%ld, ptr=%p )\n", type, stride, ptr );
}

// void glIndexPointer( GLenum type, GLsizei stride, GLvoid *ptr );
inline static void qglIndexPointer( GLenum type, GLsizei stride, GLvoid *ptr )
{
    trace( "glIndexPointer( type=%lu, stride=%ld, ptr=%p )\n", type, stride, ptr );
}

// void glEdgeFlagPointer( GLsizei stride, GLvoid *ptr );
inline static void qglEdgeFlagPointer( GLsizei stride, GLvoid *ptr )
{
    trace( "glEdgeFlagPointer( stride=%ld, ptr=%p )\n", stride, ptr );
}

// void glGetPointerv( GLenum pname, GLvoid **params );
inline static void qglGetPointerv( GLenum pname, GLvoid **params )
{
    trace( "glGetPointerv( pname=%lu, params=%p )\n", pname, params );
}

// void glDrawArrays( GLenum mode, GLint first, GLsizei count );
inline static void qglDrawArrays( GLenum mode, GLint first, GLsizei count )
{
    trace( "glDrawArrays( mode=%lu, first=%ld, count=%ld )\n", mode, first, count );
}

// void glInterleavedArrays( GLenum format, GLsizei stride, GLvoid *pointer );
inline static void qglInterleavedArrays( GLenum format, GLsizei stride, GLvoid *pointer )
{
    trace( "glInterleavedArrays( format=%lu, stride=%ld, pointer=%p )\n", format, stride, pointer );
}

// void glLightf( GLenum light, GLenum pname, GLfloat param );
inline static void qglLightf( GLenum light, GLenum pname, GLfloat param )
{
    trace( "glLightf( light=%lu, pname=%lu, param=%f )\n", light, pname, param );
}

// void glLighti( GLenum light, GLenum pname, GLint param );
inline static void qglLighti( GLenum light, GLenum pname, GLint param )
{
    trace( "glLighti( light=%lu, pname=%lu, param=%ld )\n", light, pname, param );
}

// void glLightfv( GLenum light, GLenum pname, GLfloat *params );
inline static void qglLightfv( GLenum light, GLenum pname, GLfloat *params )
{
    trace( "glLightfv( light=%lu, pname=%lu, params=%p )\n", light, pname, params );
}

// void glLightiv( GLenum light, GLenum pname, GLint *params );
inline static void qglLightiv( GLenum light, GLenum pname, GLint *params )
{
    trace( "glLightiv( light=%lu, pname=%lu, params=%p )\n", light, pname, params );
}

// void glGetLightfv( GLenum light, GLenum pname, GLfloat *params );
inline static void qglGetLightfv( GLenum light, GLenum pname, GLfloat *params )
{
    trace( "glGetLightfv( light=%lu, pname=%lu, params=%p )\n", light, pname, params );
}

// void glGetLightiv( GLenum light, GLenum pname, GLint *params );
inline static void qglGetLightiv( GLenum light, GLenum pname, GLint *params )
{
    trace( "glGetLightiv( light=%lu, pname=%lu, params=%p )\n", light, pname, params );
}

// void glLightModelf( GLenum pname, GLfloat param );
inline static void qglLightModelf( GLenum pname, GLfloat param )
{
    trace( "glLightModelf( pname=%lu, param=%f )\n", pname, param );
}

// void glLightModeli( GLenum pname, GLint param );
inline static void qglLightModeli( GLenum pname, GLint param )
{
    trace( "glLightModeli( pname=%lu, param=%ld )\n", pname, param );
}

// void glLightModelfv( GLenum pname, GLfloat *params );
inline static void qglLightModelfv( GLenum pname, GLfloat *params )
{
    trace( "glLightModelfv( pname=%lu, params=%p )\n", pname, params );
}

// void glLightModeliv( GLenum pname, GLint *params );
inline static void qglLightModeliv( GLenum pname, GLint *params )
{
    trace( "glLightModeliv( pname=%lu, params=%p )\n", pname, params );
}

// void glMaterialf( GLenum face, GLenum pname, GLfloat param );
inline static void qglMaterialf( GLenum face, GLenum pname, GLfloat param )
{
    trace( "glMaterialf( face=%lu, pname=%lu, param=%f )\n", face, pname, param );
}

// void glMateriali( GLenum face, GLenum pname, GLint param );
inline static void qglMateriali( GLenum face, GLenum pname, GLint param )
{
    trace( "glMateriali( face=%lu, pname=%lu, param=%ld )\n", face, pname, param );
}

// void glMaterialfv( GLenum face, GLenum pname, GLfloat *params );
inline static void qglMaterialfv( GLenum face, GLenum pname, GLfloat *params )
{
    trace( "glMaterialfv( face=%lu, pname=%lu, params=%p )\n", face, pname, params );
}

// void glMaterialiv( GLenum face, GLenum pname, GLint *params );
inline static void qglMaterialiv( GLenum face, GLenum pname, GLint *params )
{
    trace( "glMaterialiv( face=%lu, pname=%lu, params=%p )\n", face, pname, params );
}

// void glGetMaterialfv( GLenum face, GLenum pname, GLfloat *params );
inline static void qglGetMaterialfv( GLenum face, GLenum pname, GLfloat *params )
{
    trace( "glGetMaterialfv( face=%lu, pname=%lu, params=%p )\n", face, pname, params );
}

// void glGetMaterialiv( GLenum face, GLenum pname, GLint *params );
inline static void qglGetMaterialiv( GLenum face, GLenum pname, GLint *params )
{
    trace( "glGetMaterialiv( face=%lu, pname=%lu, params=%p )\n", face, pname, params );
}

// void glColorMaterial( GLenum face, GLenum mode );
inline static void qglColorMaterial( GLenum face, GLenum mode )
{
    trace( "glColorMaterial( face=%lu, mode=%lu )\n", face, mode );
}

// void glPixelZoom( GLfloat xfactor, GLfloat yfactor );
inline static void qglPixelZoom( GLfloat xfactor, GLfloat yfactor )
{
    trace( "glPixelZoom( xfactor=%f, yfactor=%f )\n", xfactor, yfactor );
}

// void glPixelStoref( GLenum pname, GLfloat param );
inline static void qglPixelStoref( GLenum pname, GLfloat param )
{
    trace( "glPixelStoref( pname=%lu, param=%f )\n", pname, param );
}

// void glPixelStorei( GLenum pname, GLint param );
inline static void qglPixelStorei( GLenum pname, GLint param )
{
    trace( "glPixelStorei( pname=%lu, param=%ld )\n", pname, param );
}

// void glPixelTransferf( GLenum pname, GLfloat param );
inline static void qglPixelTransferf( GLenum pname, GLfloat param )
{
    trace( "glPixelTransferf( pname=%lu, param=%f )\n", pname, param );
}

// void glPixelTransferi( GLenum pname, GLint param );
inline static void qglPixelTransferi( GLenum pname, GLint param )
{
    trace( "glPixelTransferi( pname=%lu, param=%ld )\n", pname, param );
}

// void glPixelMapfv( GLenum map, GLsizei mapsize, GLfloat *values );
inline static void qglPixelMapfv( GLenum map, GLsizei mapsize, GLfloat *values )
{
    trace( "glPixelMapfv( map=%lu, mapsize=%ld, values=%p )\n", map, mapsize, values );
}

// void glPixelMapuiv( GLenum map, GLsizei mapsize, GLuint *values );
inline static void qglPixelMapuiv( GLenum map, GLsizei mapsize, GLuint *values )
{
    trace( "glPixelMapuiv( map=%lu, mapsize=%ld, values=%p )\n", map, mapsize, values );
}

// void glPixelMapusv( GLenum map, GLsizei mapsize, GLushort *values );
inline static void qglPixelMapusv( GLenum map, GLsizei mapsize, GLushort *values )
{
    trace( "glPixelMapusv( map=%lu, mapsize=%ld, values=%p )\n", map, mapsize, values );
}

// void glGetPixelMapfv( GLenum map, GLfloat *values );
inline static void qglGetPixelMapfv( GLenum map, GLfloat *values )
{
    trace( "glGetPixelMapfv( map=%lu, values=%p )\n", map, values );
}

// void glGetPixelMapuiv( GLenum map, GLuint *values );
inline static void qglGetPixelMapuiv( GLenum map, GLuint *values )
{
    trace( "glGetPixelMapuiv( map=%lu, values=%p )\n", map, values );
}

// void glGetPixelMapusv( GLenum map, GLushort *values );
inline static void qglGetPixelMapusv( GLenum map, GLushort *values )
{
    trace( "glGetPixelMapusv( map=%lu, values=%p )\n", map, values );
}

// void glBitmap( GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, GLubyte *bitmap );
inline static void qglBitmap( GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, GLubyte *bitmap )
{
    trace( "glBitmap( width=%ld, height=%ld, xorig=%f, yorig=%f, xmove=%f, ymove=%f, bitmap=%p )\n", width, height, xorig, yorig, xmove, ymove, bitmap );
}

// void glReadPixels( GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels );
inline static void qglReadPixels( GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels )
{
    trace( "glReadPixels( x=%ld, y=%ld, width=%ld, height=%ld, format=%lu, type=%lu, pixels=%p )\n", x, y, width, height, format, type, pixels );
}

// void glDrawPixels( GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels );
inline static void qglDrawPixels( GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels )
{
    trace( "glDrawPixels( width=%ld, height=%ld, format=%lu, type=%lu, pixels=%p )\n", width, height, format, type, pixels );
}

// void glCopyPixels( GLint x, GLint y, GLsizei width, GLsizei height, GLenum type );
inline static void qglCopyPixels( GLint x, GLint y, GLsizei width, GLsizei height, GLenum type )
{
    trace( "glCopyPixels( x=%ld, y=%ld, width=%ld, height=%ld, type=%lu )\n", x, y, width, height, type );
}

// void glStencilFunc( GLenum func, GLint ref, GLuint mask );
inline static void qglStencilFunc( GLenum func, GLint ref, GLuint mask )
{
    trace( "glStencilFunc( func=%lu, ref=%ld, mask=%lu )\n", func, ref, mask );
}

// void glStencilMask( GLuint mask );
inline static void qglStencilMask( GLuint mask )
{
    trace( "glStencilMask( mask=%lu )\n", mask );
}

// void glStencilOp( GLenum fail, GLenum zfail, GLenum zpass );
inline static void qglStencilOp( GLenum fail, GLenum zfail, GLenum zpass )
{
    trace( "glStencilOp( fail=%lu, zfail=%lu, zpass=%lu )\n", fail, zfail, zpass );
}

// void glClearStencil( GLint s );
inline static void qglClearStencil( GLint s )
{
    trace( "glClearStencil( s=%ld )\n", s );
}

// void glTexGend( GLenum coord, GLenum pname, GLdouble param );
inline static void qglTexGend( GLenum coord, GLenum pname, GLdouble param )
{
    trace( "glTexGend( coord=%lu, pname=%lu, param=%f )\n", coord, pname, param );
}

// void glTexGenf( GLenum coord, GLenum pname, GLfloat param );
inline static void qglTexGenf( GLenum coord, GLenum pname, GLfloat param )
{
    trace( "glTexGenf( coord=%lu, pname=%lu, param=%f )\n", coord, pname, param );
}

// void glTexGeni( GLenum coord, GLenum pname, GLint param );
inline static void qglTexGeni( GLenum coord, GLenum pname, GLint param )
{
    trace( "glTexGeni( coord=%lu, pname=%lu, param=%ld )\n", coord, pname, param );
}

// void glTexGendv( GLenum coord, GLenum pname, GLdouble *params );
inline static void qglTexGendv( GLenum coord, GLenum pname, GLdouble *params )
{
    trace( "glTexGendv( coord=%lu, pname=%lu, params=%p )\n", coord, pname, params );
}

// void glTexGenfv( GLenum coord, GLenum pname, GLfloat *params );
inline static void qglTexGenfv( GLenum coord, GLenum pname, GLfloat *params )
{
    trace( "glTexGenfv( coord=%lu, pname=%lu, params=%p )\n", coord, pname, params );
}

// void glTexGeniv( GLenum coord, GLenum pname, GLint *params );
inline static void qglTexGeniv( GLenum coord, GLenum pname, GLint *params )
{
    trace( "glTexGeniv( coord=%lu, pname=%lu, params=%p )\n", coord, pname, params );
}

// void glGetTexGendv( GLenum coord, GLenum pname, GLdouble *params );
inline static void qglGetTexGendv( GLenum coord, GLenum pname, GLdouble *params )
{
    trace( "glGetTexGendv( coord=%lu, pname=%lu, params=%p )\n", coord, pname, params );
}

// void glGetTexGenfv( GLenum coord, GLenum pname, GLfloat *params );
inline static void qglGetTexGenfv( GLenum coord, GLenum pname, GLfloat *params )
{
    trace( "glGetTexGenfv( coord=%lu, pname=%lu, params=%p )\n", coord, pname, params );
}

// void glGetTexGeniv( GLenum coord, GLenum pname, GLint *params );
inline static void qglGetTexGeniv( GLenum coord, GLenum pname, GLint *params )
{
    trace( "glGetTexGeniv( coord=%lu, pname=%lu, params=%p )\n", coord, pname, params );
}

// void glTexEnvi( GLenum target, GLenum pname, GLint param );
inline static void qglTexEnvi( GLenum target, GLenum pname, GLint param )
{
    trace( "glTexEnvi( target=%lu, pname=%lu, param=%ld )\n", target, pname, param );
}

// void glTexEnvfv( GLenum target, GLenum pname, GLfloat *params );
inline static void qglTexEnvfv( GLenum target, GLenum pname, GLfloat *params )
{
    trace( "glTexEnvfv( target=%lu, pname=%lu, params=%p )\n", target, pname, params );
}

// void glTexEnviv( GLenum target, GLenum pname, GLint *params );
inline static void qglTexEnviv( GLenum target, GLenum pname, GLint *params )
{
    trace( "glTexEnviv( target=%lu, pname=%lu, params=%p )\n", target, pname, params );
}

// void glGetTexEnvfv( GLenum target, GLenum pname, GLfloat *params );
inline static void qglGetTexEnvfv( GLenum target, GLenum pname, GLfloat *params )
{
    trace( "glGetTexEnvfv( target=%lu, pname=%lu, params=%p )\n", target, pname, params );
}

// void glGetTexEnviv( GLenum target, GLenum pname, GLint *params );
inline static void qglGetTexEnviv( GLenum target, GLenum pname, GLint *params )
{
    trace( "glGetTexEnviv( target=%lu, pname=%lu, params=%p )\n", target, pname, params );
}

// void glTexParameteri( GLenum target, GLenum pname, GLint param );
inline static void qglTexParameteri( GLenum target, GLenum pname, GLint param )
{
    trace( "glTexParameteri( target=%lu, pname=%lu, param=%ld )\n", target, pname, param );
}

// void glTexParameteriv( GLenum target, GLenum pname, GLint *params );
inline static void qglTexParameteriv( GLenum target, GLenum pname, GLint *params )
{
    trace( "glTexParameteriv( target=%lu, pname=%lu, params=%p )\n", target, pname, params );
}

// void glGetTexParameterfv( GLenum target, GLenum pname, GLfloat *params );
inline static void qglGetTexParameterfv( GLenum target, GLenum pname, GLfloat *params )
{
    trace( "glGetTexParameterfv( target=%lu, pname=%lu, params=%p )\n", target, pname, params );
}

// void glGetTexParameteriv( GLenum target, GLenum pname, GLint *params );
inline static void qglGetTexParameteriv( GLenum target, GLenum pname, GLint *params )
{
    trace( "glGetTexParameteriv( target=%lu, pname=%lu, params=%p )\n", target, pname, params );
}

// void glGetTexLevelParameterfv( GLenum target, GLint level, GLenum pname, GLfloat *params );
inline static void qglGetTexLevelParameterfv( GLenum target, GLint level, GLenum pname, GLfloat *params )
{
    trace( "glGetTexLevelParameterfv( target=%lu, level=%ld, pname=%lu, params=%p )\n", target, level, pname, params );
}

// void glGetTexLevelParameteriv( GLenum target, GLint level, GLenum pname, GLint *params );
inline static void qglGetTexLevelParameteriv( GLenum target, GLint level, GLenum pname, GLint *params )
{
    trace( "glGetTexLevelParameteriv( target=%lu, level=%ld, pname=%lu, params=%p )\n", target, level, pname, params );
}

// void glTexImage1D( GLenum target, GLint level, GLint internalFormat, GLsizei width, GLint border, GLenum format, GLenum type, GLvoid *pixels );
inline static void qglTexImage1D( GLenum target, GLint level, GLint internalFormat, GLsizei width, GLint border, GLenum format, GLenum type, GLvoid *pixels )
{
    trace( "glTexImage1D( target=%lu, level=%ld, internalFormat=%ld, width=%ld, border=%ld, format=%lu, type=%lu, pixels=%p )\n", target, level, internalFormat, width, border, format, type, pixels );
}

// void glGetTexImage( GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels );
inline static void qglGetTexImage( GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels )
{
    trace( "glGetTexImage( target=%lu, level=%ld, format=%lu, type=%lu, pixels=%p )\n", target, level, format, type, pixels );
}

// void glGenTextures( GLsizei n, GLuint *textures );
inline static void qglGenTextures( GLsizei n, GLuint *textures )
{
    trace( "glGenTextures( n=%ld, textures=%p )\n", n, textures );
}

// void glDeleteTextures( GLsizei n, GLuint *textures );
inline static void qglDeleteTextures( GLsizei n, GLuint *textures )
{
    trace( "glDeleteTextures( n=%ld, textures=%p )\n", n, textures );
}

// void glPrioritizeTextures( GLsizei n, GLuint *textures, GLclampf *priorities );
inline static void qglPrioritizeTextures( GLsizei n, GLuint *textures, GLclampf *priorities )
{
    trace( "glPrioritizeTextures( n=%ld, textures=%p, priorities=%p )\n", n, textures, priorities );
}

// GLboolean glAreTexturesResident( GLsizei n, GLuint *textures, GLboolean *residences );
inline static GLboolean qglAreTexturesResident( GLsizei n, GLuint *textures, GLboolean *residences )
{
    GLboolean returnValue;
    trace( "glAreTexturesResident( n=%ld, textures=%p, residences=%p )\n", n, textures, residences );
    return returnValue;
}

// GLboolean glIsTexture( GLuint texture );
inline static GLboolean qglIsTexture( GLuint texture )
{
    GLboolean returnValue;
    trace( "glIsTexture( texture=%lu )\n", texture );
    return returnValue;
}

// void glTexSubImage1D( GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, GLvoid *pixels );
inline static void qglTexSubImage1D( GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, GLvoid *pixels )
{
    trace( "glTexSubImage1D( target=%lu, level=%ld, xoffset=%ld, width=%ld, format=%lu, type=%lu, pixels=%p )\n", target, level, xoffset, width, format, type, pixels );
}

// void glCopyTexImage1D( GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border );
inline static void qglCopyTexImage1D( GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border )
{
    trace( "glCopyTexImage1D( target=%lu, level=%ld, internalformat=%lu, x=%ld, y=%ld, width=%ld, border=%ld )\n", target, level, internalformat, x, y, width, border );
}

// void glCopyTexImage2D( GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border );
inline static void qglCopyTexImage2D( GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border )
{
    trace( "glCopyTexImage2D( target=%lu, level=%ld, internalformat=%lu, x=%ld, y=%ld, width=%ld, height=%ld, border=%ld )\n", target, level, internalformat, x, y, width, height, border );
}

// void glCopyTexSubImage1D( GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width );
inline static void qglCopyTexSubImage1D( GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width )
{
    trace( "glCopyTexSubImage1D( target=%lu, level=%ld, xoffset=%ld, x=%ld, y=%ld, width=%ld )\n", target, level, xoffset, x, y, width );
}

// void glCopyTexSubImage2D( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height );
inline static void qglCopyTexSubImage2D( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height )
{
    trace( "glCopyTexSubImage2D( target=%lu, level=%ld, xoffset=%ld, yoffset=%ld, x=%ld, y=%ld, width=%ld, height=%ld )\n", target, level, xoffset, yoffset, x, y, width, height );
}

// void glMap1d( GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, GLdouble *points );
inline static void qglMap1d( GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, GLdouble *points )
{
    trace( "glMap1d( target=%lu, u1=%f, u2=%f, stride=%ld, order=%ld, points=%p )\n", target, u1, u2, stride, order, points );
}

// void glMap1f( GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, GLfloat *points );
inline static void qglMap1f( GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, GLfloat *points )
{
    trace( "glMap1f( target=%lu, u1=%f, u2=%f, stride=%ld, order=%ld, points=%p )\n", target, u1, u2, stride, order, points );
}

// void glMap2d( GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble *points );
inline static void qglMap2d( GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble *points )
{
    trace( "glMap2d( target=%lu, u1=%f, u2=%f, ustride=%ld, uorder=%ld, v1=%f, v2=%f, vstride=%ld, vorder=%ld, points=%p )\n", target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points );
}

// void glMap2f( GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat *points );
inline static void qglMap2f( GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat *points )
{
    trace( "glMap2f( target=%lu, u1=%f, u2=%f, ustride=%ld, uorder=%ld, v1=%f, v2=%f, vstride=%ld, vorder=%ld, points=%p )\n", target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points );
}

// void glGetMapdv( GLenum target, GLenum query, GLdouble *v );
inline static void qglGetMapdv( GLenum target, GLenum query, GLdouble *v )
{
    trace( "glGetMapdv( target=%lu, query=%lu, v=%p )\n", target, query, v );
}

// void glGetMapfv( GLenum target, GLenum query, GLfloat *v );
inline static void qglGetMapfv( GLenum target, GLenum query, GLfloat *v )
{
    trace( "glGetMapfv( target=%lu, query=%lu, v=%p )\n", target, query, v );
}

// void glGetMapiv( GLenum target, GLenum query, GLint *v );
inline static void qglGetMapiv( GLenum target, GLenum query, GLint *v )
{
    trace( "glGetMapiv( target=%lu, query=%lu, v=%p )\n", target, query, v );
}

// void glEvalCoord1d( GLdouble u );
inline static void qglEvalCoord1d( GLdouble u )
{
    trace( "glEvalCoord1d( u=%f )\n", u );
}

// void glEvalCoord1f( GLfloat u );
inline static void qglEvalCoord1f( GLfloat u )
{
    trace( "glEvalCoord1f( u=%f )\n", u );
}

// void glEvalCoord1dv( GLdouble *u );
inline static void qglEvalCoord1dv( GLdouble *u )
{
    trace( "glEvalCoord1dv( u=%p )\n", u );
}

// void glEvalCoord1fv( GLfloat *u );
inline static void qglEvalCoord1fv( GLfloat *u )
{
    trace( "glEvalCoord1fv( u=%p )\n", u );
}

// void glEvalCoord2d( GLdouble u, GLdouble v );
inline static void qglEvalCoord2d( GLdouble u, GLdouble v )
{
    trace( "glEvalCoord2d( u=%f, v=%f )\n", u, v );
}

// void glEvalCoord2f( GLfloat u, GLfloat v );
inline static void qglEvalCoord2f( GLfloat u, GLfloat v )
{
    trace( "glEvalCoord2f( u=%f, v=%f )\n", u, v );
}

// void glEvalCoord2dv( GLdouble *u );
inline static void qglEvalCoord2dv( GLdouble *u )
{
    trace( "glEvalCoord2dv( u=%p )\n", u );
}

// void glEvalCoord2fv( GLfloat *u );
inline static void qglEvalCoord2fv( GLfloat *u )
{
    trace( "glEvalCoord2fv( u=%p )\n", u );
}

// void glMapGrid1d( GLint un, GLdouble u1, GLdouble u2 );
inline static void qglMapGrid1d( GLint un, GLdouble u1, GLdouble u2 )
{
    trace( "glMapGrid1d( un=%ld, u1=%f, u2=%f )\n", un, u1, u2 );
}

// void glMapGrid1f( GLint un, GLfloat u1, GLfloat u2 );
inline static void qglMapGrid1f( GLint un, GLfloat u1, GLfloat u2 )
{
    trace( "glMapGrid1f( un=%ld, u1=%f, u2=%f )\n", un, u1, u2 );
}

// void glMapGrid2d( GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2 );
inline static void qglMapGrid2d( GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2 )
{
    trace( "glMapGrid2d( un=%ld, u1=%f, u2=%f, vn=%ld, v1=%f, v2=%f )\n", un, u1, u2, vn, v1, v2 );
}

// void glMapGrid2f( GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2 );
inline static void qglMapGrid2f( GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2 )
{
    trace( "glMapGrid2f( un=%ld, u1=%f, u2=%f, vn=%ld, v1=%f, v2=%f )\n", un, u1, u2, vn, v1, v2 );
}

// void glEvalPoint1( GLint i );
inline static void qglEvalPoint1( GLint i )
{
    trace( "glEvalPoint1( i=%ld )\n", i );
}

// void glEvalPoint2( GLint i, GLint j );
inline static void qglEvalPoint2( GLint i, GLint j )
{
    trace( "glEvalPoint2( i=%ld, j=%ld )\n", i, j );
}

// void glEvalMesh1( GLenum mode, GLint i1, GLint i2 );
inline static void qglEvalMesh1( GLenum mode, GLint i1, GLint i2 )
{
    trace( "glEvalMesh1( mode=%lu, i1=%ld, i2=%ld )\n", mode, i1, i2 );
}

// void glEvalMesh2( GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2 );
inline static void qglEvalMesh2( GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2 )
{
    trace( "glEvalMesh2( mode=%lu, i1=%ld, i2=%ld, j1=%ld, j2=%ld )\n", mode, i1, i2, j1, j2 );
}

// void glFogf( GLenum pname, GLfloat param );
inline static void qglFogf( GLenum pname, GLfloat param )
{
    trace( "glFogf( pname=%lu, param=%f )\n", pname, param );
}

// void glFogi( GLenum pname, GLint param );
inline static void qglFogi( GLenum pname, GLint param )
{
    trace( "glFogi( pname=%lu, param=%ld )\n", pname, param );
}

// void glFogfv( GLenum pname, GLfloat *params );
inline static void qglFogfv( GLenum pname, GLfloat *params )
{
    trace( "glFogfv( pname=%lu, params=%p )\n", pname, params );
}

// void glFogiv( GLenum pname, GLint *params );
inline static void qglFogiv( GLenum pname, GLint *params )
{
    trace( "glFogiv( pname=%lu, params=%p )\n", pname, params );
}

// void glFeedbackBuffer( GLsizei size, GLenum type, GLfloat *buffer );
inline static void qglFeedbackBuffer( GLsizei size, GLenum type, GLfloat *buffer )
{
    trace( "glFeedbackBuffer( size=%ld, type=%lu, buffer=%p )\n", size, type, buffer );
}

// void glPassThrough( GLfloat token );
inline static void qglPassThrough( GLfloat token )
{
    trace( "glPassThrough( token=%f )\n", token );
}

// void glSelectBuffer( GLsizei size, GLuint *buffer );
inline static void qglSelectBuffer( GLsizei size, GLuint *buffer )
{
    trace( "glSelectBuffer( size=%ld, buffer=%p )\n", size, buffer );
}

// void glInitNames();
inline static void qglInitNames()
{
    trace( "glInitNames( void )\n" );
}

// void glLoadName( GLuint name );
inline static void qglLoadName( GLuint name )
{
    trace( "glLoadName( name=%lu )\n", name );
}

// void glPushName( GLuint name );
inline static void qglPushName( GLuint name )
{
    trace( "glPushName( name=%lu )\n", name );
}

// void glPopName();
inline static void qglPopName()
{
    trace( "glPopName( void )\n" );
}

// void glDrawRangeElements( GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, GLvoid *indices );
inline static void qglDrawRangeElements( GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, GLvoid *indices )
{
    trace( "glDrawRangeElements( mode=%lu, start=%lu, end=%lu, count=%ld, type=%lu, indices=%p )\n", mode, start, end, count, type, indices );
}

// void glTexImage3D( GLenum target, GLint level, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, GLvoid *pixels );
inline static void qglTexImage3D( GLenum target, GLint level, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, GLvoid *pixels )
{
    trace( "glTexImage3D( target=%lu, level=%ld, internalFormat=%ld, width=%ld, height=%ld, depth=%ld, border=%ld, format=%lu, type=%lu, pixels=%p )\n", target, level, internalFormat, width, height, depth, border, format, type, pixels );
}

// void glTexSubImage3D( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLvoid *pixels );
inline static void qglTexSubImage3D( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLvoid *pixels )
{
    trace( "glTexSubImage3D( target=%lu, level=%ld, xoffset=%ld, yoffset=%ld, zoffset=%ld, width=%ld, height=%ld, depth=%ld, format=%lu, type=%lu, pixels=%p )\n", target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels );
}

// void glCopyTexSubImage3D( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height );
inline static void qglCopyTexSubImage3D( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height )
{
    trace( "glCopyTexSubImage3D( target=%lu, level=%ld, xoffset=%ld, yoffset=%ld, zoffset=%ld, x=%ld, y=%ld, width=%ld, height=%ld )\n", target, level, xoffset, yoffset, zoffset, x, y, width, height );
}

// void glColorTable( GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, GLvoid *table );
inline static void qglColorTable( GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, GLvoid *table )
{
    trace( "glColorTable( target=%lu, internalformat=%lu, width=%ld, format=%lu, type=%lu, table=%p )\n", target, internalformat, width, format, type, table );
}

// void glColorSubTable( GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, GLvoid *data );
inline static void qglColorSubTable( GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, GLvoid *data )
{
    trace( "glColorSubTable( target=%lu, start=%ld, count=%ld, format=%lu, type=%lu, data=%p )\n", target, start, count, format, type, data );
}

// void glColorTableParameteriv( GLenum target, GLenum pname, GLint *params );
inline static void qglColorTableParameteriv( GLenum target, GLenum pname, GLint *params )
{
    trace( "glColorTableParameteriv( target=%lu, pname=%lu, params=%p )\n", target, pname, params );
}

// void glColorTableParameterfv( GLenum target, GLenum pname, GLfloat *params );
inline static void qglColorTableParameterfv( GLenum target, GLenum pname, GLfloat *params )
{
    trace( "glColorTableParameterfv( target=%lu, pname=%lu, params=%p )\n", target, pname, params );
}

// void glCopyColorSubTable( GLenum target, GLsizei start, GLint x, GLint y, GLsizei width );
inline static void qglCopyColorSubTable( GLenum target, GLsizei start, GLint x, GLint y, GLsizei width )
{
    trace( "glCopyColorSubTable( target=%lu, start=%ld, x=%ld, y=%ld, width=%ld )\n", target, start, x, y, width );
}

// void glCopyColorTable( GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width );
inline static void qglCopyColorTable( GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width )
{
    trace( "glCopyColorTable( target=%lu, internalformat=%lu, x=%ld, y=%ld, width=%ld )\n", target, internalformat, x, y, width );
}

// void glGetColorTable( GLenum target, GLenum format, GLenum type, GLvoid *table );
inline static void qglGetColorTable( GLenum target, GLenum format, GLenum type, GLvoid *table )
{
    trace( "glGetColorTable( target=%lu, format=%lu, type=%lu, table=%p )\n", target, format, type, table );
}

// void glGetColorTableParameterfv( GLenum target, GLenum pname, GLfloat *params );
inline static void qglGetColorTableParameterfv( GLenum target, GLenum pname, GLfloat *params )
{
    trace( "glGetColorTableParameterfv( target=%lu, pname=%lu, params=%p )\n", target, pname, params );
}

// void glGetColorTableParameteriv( GLenum target, GLenum pname, GLint *params );
inline static void qglGetColorTableParameteriv( GLenum target, GLenum pname, GLint *params )
{
    trace( "glGetColorTableParameteriv( target=%lu, pname=%lu, params=%p )\n", target, pname, params );
}

// void glBlendEquation( GLenum mode );
inline static void qglBlendEquation( GLenum mode )
{
    trace( "glBlendEquation( mode=%lu )\n", mode );
}

// void glBlendColor( GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha );
inline static void qglBlendColor( GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha )
{
    trace( "glBlendColor( red=%f, green=%f, blue=%f, alpha=%f )\n", red, green, blue, alpha );
}

// void glHistogram( GLenum target, GLsizei width, GLenum internalformat, GLboolean sink );
inline static void qglHistogram( GLenum target, GLsizei width, GLenum internalformat, GLboolean sink )
{
    trace( "glHistogram( target=%lu, width=%ld, internalformat=%lu, sink=%u )\n", target, width, internalformat, sink );
}

// void glResetHistogram( GLenum target );
inline static void qglResetHistogram( GLenum target )
{
    trace( "glResetHistogram( target=%lu )\n", target );
}

// void glGetHistogram( GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values );
inline static void qglGetHistogram( GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values )
{
    trace( "glGetHistogram( target=%lu, reset=%u, format=%lu, type=%lu, values=%p )\n", target, reset, format, type, values );
}

// void glGetHistogramParameterfv( GLenum target, GLenum pname, GLfloat *params );
inline static void qglGetHistogramParameterfv( GLenum target, GLenum pname, GLfloat *params )
{
    trace( "glGetHistogramParameterfv( target=%lu, pname=%lu, params=%p )\n", target, pname, params );
}

// void glGetHistogramParameteriv( GLenum target, GLenum pname, GLint *params );
inline static void qglGetHistogramParameteriv( GLenum target, GLenum pname, GLint *params )
{
    trace( "glGetHistogramParameteriv( target=%lu, pname=%lu, params=%p )\n", target, pname, params );
}

// void glMinmax( GLenum target, GLenum internalformat, GLboolean sink );
inline static void qglMinmax( GLenum target, GLenum internalformat, GLboolean sink )
{
    trace( "glMinmax( target=%lu, internalformat=%lu, sink=%u )\n", target, internalformat, sink );
}

// void glResetMinmax( GLenum target );
inline static void qglResetMinmax( GLenum target )
{
    trace( "glResetMinmax( target=%lu )\n", target );
}

// void glGetMinmax( GLenum target, GLboolean reset, GLenum format, GLenum types, GLvoid *values );
inline static void qglGetMinmax( GLenum target, GLboolean reset, GLenum format, GLenum types, GLvoid *values )
{
    trace( "glGetMinmax( target=%lu, reset=%u, format=%lu, types=%lu, values=%p )\n", target, reset, format, types, values );
}

// void glGetMinmaxParameterfv( GLenum target, GLenum pname, GLfloat *params );
inline static void qglGetMinmaxParameterfv( GLenum target, GLenum pname, GLfloat *params )
{
    trace( "glGetMinmaxParameterfv( target=%lu, pname=%lu, params=%p )\n", target, pname, params );
}

// void glGetMinmaxParameteriv( GLenum target, GLenum pname, GLint *params );
inline static void qglGetMinmaxParameteriv( GLenum target, GLenum pname, GLint *params )
{
    trace( "glGetMinmaxParameteriv( target=%lu, pname=%lu, params=%p )\n", target, pname, params );
}

// void glConvolutionFilter1D( GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, GLvoid *image );
inline static void qglConvolutionFilter1D( GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, GLvoid *image )
{
    trace( "glConvolutionFilter1D( target=%lu, internalformat=%lu, width=%ld, format=%lu, type=%lu, image=%p )\n", target, internalformat, width, format, type, image );
}

// void glConvolutionFilter2D( GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *image );
inline static void qglConvolutionFilter2D( GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *image )
{
    trace( "glConvolutionFilter2D( target=%lu, internalformat=%lu, width=%ld, height=%ld, format=%lu, type=%lu, image=%p )\n", target, internalformat, width, height, format, type, image );
}

// void glConvolutionParameterf( GLenum target, GLenum pname, GLfloat params );
inline static void qglConvolutionParameterf( GLenum target, GLenum pname, GLfloat params )
{
    trace( "glConvolutionParameterf( target=%lu, pname=%lu, params=%f )\n", target, pname, params );
}

// void glConvolutionParameterfv( GLenum target, GLenum pname, GLfloat *params );
inline static void qglConvolutionParameterfv( GLenum target, GLenum pname, GLfloat *params )
{
    trace( "glConvolutionParameterfv( target=%lu, pname=%lu, params=%p )\n", target, pname, params );
}

// void glConvolutionParameteri( GLenum target, GLenum pname, GLint params );
inline static void qglConvolutionParameteri( GLenum target, GLenum pname, GLint params )
{
    trace( "glConvolutionParameteri( target=%lu, pname=%lu, params=%ld )\n", target, pname, params );
}

// void glConvolutionParameteriv( GLenum target, GLenum pname, GLint *params );
inline static void qglConvolutionParameteriv( GLenum target, GLenum pname, GLint *params )
{
    trace( "glConvolutionParameteriv( target=%lu, pname=%lu, params=%p )\n", target, pname, params );
}

// void glCopyConvolutionFilter1D( GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width );
inline static void qglCopyConvolutionFilter1D( GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width )
{
    trace( "glCopyConvolutionFilter1D( target=%lu, internalformat=%lu, x=%ld, y=%ld, width=%ld )\n", target, internalformat, x, y, width );
}

// void glCopyConvolutionFilter2D( GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height );
inline static void qglCopyConvolutionFilter2D( GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height )
{
    trace( "glCopyConvolutionFilter2D( target=%lu, internalformat=%lu, x=%ld, y=%ld, width=%ld, height=%ld )\n", target, internalformat, x, y, width, height );
}

// void glGetConvolutionFilter( GLenum target, GLenum format, GLenum type, GLvoid *image );
inline static void qglGetConvolutionFilter( GLenum target, GLenum format, GLenum type, GLvoid *image )
{
    trace( "glGetConvolutionFilter( target=%lu, format=%lu, type=%lu, image=%p )\n", target, format, type, image );
}

// void glGetConvolutionParameterfv( GLenum target, GLenum pname, GLfloat *params );
inline static void qglGetConvolutionParameterfv( GLenum target, GLenum pname, GLfloat *params )
{
    trace( "glGetConvolutionParameterfv( target=%lu, pname=%lu, params=%p )\n", target, pname, params );
}

// void glGetConvolutionParameteriv( GLenum target, GLenum pname, GLint *params );
inline static void qglGetConvolutionParameteriv( GLenum target, GLenum pname, GLint *params )
{
    trace( "glGetConvolutionParameteriv( target=%lu, pname=%lu, params=%p )\n", target, pname, params );
}

// void glSeparableFilter2D( GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *row, GLvoid *column );
inline static void qglSeparableFilter2D( GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *row, GLvoid *column )
{
    trace( "glSeparableFilter2D( target=%lu, internalformat=%lu, width=%ld, height=%ld, format=%lu, type=%lu, row=%p, column=%p )\n", target, internalformat, width, height, format, type, row, column );
}

// void glGetSeparableFilter( GLenum target, GLenum format, GLenum type, GLvoid *row, GLvoid *column, GLvoid *span );
inline static void qglGetSeparableFilter( GLenum target, GLenum format, GLenum type, GLvoid *row, GLvoid *column, GLvoid *span )
{
    trace( "glGetSeparableFilter( target=%lu, format=%lu, type=%lu, row=%p, column=%p, span=%p )\n", target, format, type, row, column, span );
}

// void glActiveTexture( GLenum texture );
inline static void qglActiveTexture( GLenum texture )
{
    trace( "glActiveTexture( texture=%lu )\n", texture );
}

// void glClientActiveTexture( GLenum texture );
inline static void qglClientActiveTexture( GLenum texture )
{
    trace( "glClientActiveTexture( texture=%lu )\n", texture );
}

// void glCompressedTexImage1D( GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, GLvoid *data );
inline static void qglCompressedTexImage1D( GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, GLvoid *data )
{
    trace( "glCompressedTexImage1D( target=%lu, level=%ld, internalformat=%lu, width=%ld, border=%ld, imageSize=%ld, data=%p )\n", target, level, internalformat, width, border, imageSize, data );
}

// void glCompressedTexImage2D( GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, GLvoid *data );
inline static void qglCompressedTexImage2D( GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, GLvoid *data )
{
    trace( "glCompressedTexImage2D( target=%lu, level=%ld, internalformat=%lu, width=%ld, height=%ld, border=%ld, imageSize=%ld, data=%p )\n", target, level, internalformat, width, height, border, imageSize, data );
}

// void glCompressedTexImage3D( GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, GLvoid *data );
inline static void qglCompressedTexImage3D( GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, GLvoid *data )
{
    trace( "glCompressedTexImage3D( target=%lu, level=%ld, internalformat=%lu, width=%ld, height=%ld, depth=%ld, border=%ld, imageSize=%ld, data=%p )\n", target, level, internalformat, width, height, depth, border, imageSize, data );
}

// void glCompressedTexSubImage1D( GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, GLvoid *data );
inline static void qglCompressedTexSubImage1D( GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, GLvoid *data )
{
    trace( "glCompressedTexSubImage1D( target=%lu, level=%ld, xoffset=%ld, width=%ld, format=%lu, imageSize=%ld, data=%p )\n", target, level, xoffset, width, format, imageSize, data );
}

// void glCompressedTexSubImage2D( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, GLvoid *data );
inline static void qglCompressedTexSubImage2D( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, GLvoid *data )
{
    trace( "glCompressedTexSubImage2D( target=%lu, level=%ld, xoffset=%ld, yoffset=%ld, width=%ld, height=%ld, format=%lu, imageSize=%ld, data=%p )\n", target, level, xoffset, yoffset, width, height, format, imageSize, data );
}

// void glCompressedTexSubImage3D( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, GLvoid *data );
inline static void qglCompressedTexSubImage3D( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, GLvoid *data )
{
    trace( "glCompressedTexSubImage3D( target=%lu, level=%ld, xoffset=%ld, yoffset=%ld, zoffset=%ld, width=%ld, height=%ld, depth=%ld, format=%lu, imageSize=%ld, data=%p )\n", target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data );
}

// void glGetCompressedTexImage( GLenum target, GLint lod, GLvoid *img );
inline static void qglGetCompressedTexImage( GLenum target, GLint lod, GLvoid *img )
{
    trace( "glGetCompressedTexImage( target=%lu, lod=%ld, img=%p )\n", target, lod, img );
}

// void glMultiTexCoord1d( GLenum target, GLdouble s );
inline static void qglMultiTexCoord1d( GLenum target, GLdouble s )
{
    trace( "glMultiTexCoord1d( target=%lu, s=%f )\n", target, s );
}

// void glMultiTexCoord1dv( GLenum target, GLdouble *v );
inline static void qglMultiTexCoord1dv( GLenum target, GLdouble *v )
{
    trace( "glMultiTexCoord1dv( target=%lu, v=%p )\n", target, v );
}

// void glMultiTexCoord1f( GLenum target, GLfloat s );
inline static void qglMultiTexCoord1f( GLenum target, GLfloat s )
{
    trace( "glMultiTexCoord1f( target=%lu, s=%f )\n", target, s );
}

// void glMultiTexCoord1fv( GLenum target, GLfloat *v );
inline static void qglMultiTexCoord1fv( GLenum target, GLfloat *v )
{
    trace( "glMultiTexCoord1fv( target=%lu, v=%p )\n", target, v );
}

// void glMultiTexCoord1i( GLenum target, GLint s );
inline static void qglMultiTexCoord1i( GLenum target, GLint s )
{
    trace( "glMultiTexCoord1i( target=%lu, s=%ld )\n", target, s );
}

// void glMultiTexCoord1iv( GLenum target, GLint *v );
inline static void qglMultiTexCoord1iv( GLenum target, GLint *v )
{
    trace( "glMultiTexCoord1iv( target=%lu, v=%p )\n", target, v );
}

// void glMultiTexCoord1s( GLenum target, GLshort s );
inline static void qglMultiTexCoord1s( GLenum target, GLshort s )
{
    trace( "glMultiTexCoord1s( target=%lu, s=%d )\n", target, s );
}

// void glMultiTexCoord1sv( GLenum target, GLshort *v );
inline static void qglMultiTexCoord1sv( GLenum target, GLshort *v )
{
    trace( "glMultiTexCoord1sv( target=%lu, v=%p )\n", target, v );
}

// void glMultiTexCoord2d( GLenum target, GLdouble s, GLdouble t );
inline static void qglMultiTexCoord2d( GLenum target, GLdouble s, GLdouble t )
{
    trace( "glMultiTexCoord2d( target=%lu, s=%f, t=%f )\n", target, s, t );
}

// void glMultiTexCoord2dv( GLenum target, GLdouble *v );
inline static void qglMultiTexCoord2dv( GLenum target, GLdouble *v )
{
    trace( "glMultiTexCoord2dv( target=%lu, v=%p )\n", target, v );
}

// void glMultiTexCoord2f( GLenum target, GLfloat s, GLfloat t );
inline static void qglMultiTexCoord2f( GLenum target, GLfloat s, GLfloat t )
{
    trace( "glMultiTexCoord2f( target=%lu, s=%f, t=%f )\n", target, s, t );
}

// void glMultiTexCoord2fv( GLenum target, GLfloat *v );
inline static void qglMultiTexCoord2fv( GLenum target, GLfloat *v )
{
    trace( "glMultiTexCoord2fv( target=%lu, v=%p )\n", target, v );
}

// void glMultiTexCoord2i( GLenum target, GLint s, GLint t );
inline static void qglMultiTexCoord2i( GLenum target, GLint s, GLint t )
{
    trace( "glMultiTexCoord2i( target=%lu, s=%ld, t=%ld )\n", target, s, t );
}

// void glMultiTexCoord2iv( GLenum target, GLint *v );
inline static void qglMultiTexCoord2iv( GLenum target, GLint *v )
{
    trace( "glMultiTexCoord2iv( target=%lu, v=%p )\n", target, v );
}

// void glMultiTexCoord2s( GLenum target, GLshort s, GLshort t );
inline static void qglMultiTexCoord2s( GLenum target, GLshort s, GLshort t )
{
    trace( "glMultiTexCoord2s( target=%lu, s=%d, t=%d )\n", target, s, t );
}

// void glMultiTexCoord2sv( GLenum target, GLshort *v );
inline static void qglMultiTexCoord2sv( GLenum target, GLshort *v )
{
    trace( "glMultiTexCoord2sv( target=%lu, v=%p )\n", target, v );
}

// void glMultiTexCoord3d( GLenum target, GLdouble s, GLdouble t, GLdouble r );
inline static void qglMultiTexCoord3d( GLenum target, GLdouble s, GLdouble t, GLdouble r )
{
    trace( "glMultiTexCoord3d( target=%lu, s=%f, t=%f, r=%f )\n", target, s, t, r );
}

// void glMultiTexCoord3dv( GLenum target, GLdouble *v );
inline static void qglMultiTexCoord3dv( GLenum target, GLdouble *v )
{
    trace( "glMultiTexCoord3dv( target=%lu, v=%p )\n", target, v );
}

// void glMultiTexCoord3f( GLenum target, GLfloat s, GLfloat t, GLfloat r );
inline static void qglMultiTexCoord3f( GLenum target, GLfloat s, GLfloat t, GLfloat r )
{
    trace( "glMultiTexCoord3f( target=%lu, s=%f, t=%f, r=%f )\n", target, s, t, r );
}

// void glMultiTexCoord3fv( GLenum target, GLfloat *v );
inline static void qglMultiTexCoord3fv( GLenum target, GLfloat *v )
{
    trace( "glMultiTexCoord3fv( target=%lu, v=%p )\n", target, v );
}

// void glMultiTexCoord3i( GLenum target, GLint s, GLint t, GLint r );
inline static void qglMultiTexCoord3i( GLenum target, GLint s, GLint t, GLint r )
{
    trace( "glMultiTexCoord3i( target=%lu, s=%ld, t=%ld, r=%ld )\n", target, s, t, r );
}

// void glMultiTexCoord3iv( GLenum target, GLint *v );
inline static void qglMultiTexCoord3iv( GLenum target, GLint *v )
{
    trace( "glMultiTexCoord3iv( target=%lu, v=%p )\n", target, v );
}

// void glMultiTexCoord3s( GLenum target, GLshort s, GLshort t, GLshort r );
inline static void qglMultiTexCoord3s( GLenum target, GLshort s, GLshort t, GLshort r )
{
    trace( "glMultiTexCoord3s( target=%lu, s=%d, t=%d, r=%d )\n", target, s, t, r );
}

// void glMultiTexCoord3sv( GLenum target, GLshort *v );
inline static void qglMultiTexCoord3sv( GLenum target, GLshort *v )
{
    trace( "glMultiTexCoord3sv( target=%lu, v=%p )\n", target, v );
}

// void glMultiTexCoord4d( GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q );
inline static void qglMultiTexCoord4d( GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q )
{
    trace( "glMultiTexCoord4d( target=%lu, s=%f, t=%f, r=%f, q=%f )\n", target, s, t, r, q );
}

// void glMultiTexCoord4dv( GLenum target, GLdouble *v );
inline static void qglMultiTexCoord4dv( GLenum target, GLdouble *v )
{
    trace( "glMultiTexCoord4dv( target=%lu, v=%p )\n", target, v );
}

// void glMultiTexCoord4f( GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q );
inline static void qglMultiTexCoord4f( GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q )
{
    trace( "glMultiTexCoord4f( target=%lu, s=%f, t=%f, r=%f, q=%f )\n", target, s, t, r, q );
}

// void glMultiTexCoord4fv( GLenum target, GLfloat *v );
inline static void qglMultiTexCoord4fv( GLenum target, GLfloat *v )
{
    trace( "glMultiTexCoord4fv( target=%lu, v=%p )\n", target, v );
}

// void glMultiTexCoord4i( GLenum target, GLint s, GLint t, GLint r, GLint q );
inline static void qglMultiTexCoord4i( GLenum target, GLint s, GLint t, GLint r, GLint q )
{
    trace( "glMultiTexCoord4i( target=%lu, s=%ld, t=%ld, r=%ld, q=%ld )\n", target, s, t, r, q );
}

// void glMultiTexCoord4iv( GLenum target, GLint *v );
inline static void qglMultiTexCoord4iv( GLenum target, GLint *v )
{
    trace( "glMultiTexCoord4iv( target=%lu, v=%p )\n", target, v );
}

// void glMultiTexCoord4s( GLenum target, GLshort s, GLshort t, GLshort r, GLshort q );
inline static void qglMultiTexCoord4s( GLenum target, GLshort s, GLshort t, GLshort r, GLshort q )
{
    trace( "glMultiTexCoord4s( target=%lu, s=%d, t=%d, r=%d, q=%d )\n", target, s, t, r, q );
}

// void glMultiTexCoord4sv( GLenum target, GLshort *v );
inline static void qglMultiTexCoord4sv( GLenum target, GLshort *v )
{
    trace( "glMultiTexCoord4sv( target=%lu, v=%p )\n", target, v );
}

// void glLoadTransposeMatrixd( GLdouble m[16] );
inline static void qglLoadTransposeMatrixd( GLdouble m[16] )
{
    trace( "glLoadTransposeMatrixd( m=%f )\n", m );
}

// void glLoadTransposeMatrixf( GLfloat m[16] );
inline static void qglLoadTransposeMatrixf( GLfloat m[16] )
{
    trace( "glLoadTransposeMatrixf( m=%f )\n", m );
}

// void glMultTransposeMatrixd( GLdouble m[16] );
inline static void qglMultTransposeMatrixd( GLdouble m[16] )
{
    trace( "glMultTransposeMatrixd( m=%f )\n", m );
}

// void glMultTransposeMatrixf( GLfloat m[16] );
inline static void qglMultTransposeMatrixf( GLfloat m[16] )
{
    trace( "glMultTransposeMatrixf( m=%f )\n", m );
}

// void glSampleCoverage( GLclampf value, GLboolean invert );
inline static void qglSampleCoverage( GLclampf value, GLboolean invert )
{
    trace( "glSampleCoverage( value=%f, invert=%u )\n", value, invert );
}

// Prevent calls to the 'normal' GL functions
#define glClearIndex CALL_THE_QGL_VERSION_OF_glClearIndex
#define glIndexMask CALL_THE_QGL_VERSION_OF_glIndexMask
#define glColorMask CALL_THE_QGL_VERSION_OF_glColorMask
#define glLogicOp CALL_THE_QGL_VERSION_OF_glLogicOp
#define glFrontFace CALL_THE_QGL_VERSION_OF_glFrontFace
#define glPointSize CALL_THE_QGL_VERSION_OF_glPointSize
#define glLineWidth CALL_THE_QGL_VERSION_OF_glLineWidth
#define glLineStipple CALL_THE_QGL_VERSION_OF_glLineStipple
#define glPolygonStipple CALL_THE_QGL_VERSION_OF_glPolygonStipple
#define glGetPolygonStipple CALL_THE_QGL_VERSION_OF_glGetPolygonStipple
#define glEdgeFlag CALL_THE_QGL_VERSION_OF_glEdgeFlag
#define glEdgeFlagv CALL_THE_QGL_VERSION_OF_glEdgeFlagv
#define glClipPlane CALL_THE_QGL_VERSION_OF_glClipPlane
#define glGetClipPlane CALL_THE_QGL_VERSION_OF_glGetClipPlane
#define glReadBuffer CALL_THE_QGL_VERSION_OF_glReadBuffer
#define glIsEnabled CALL_THE_QGL_VERSION_OF_glIsEnabled
#define glGetBooleanv CALL_THE_QGL_VERSION_OF_glGetBooleanv
#define glGetDoublev CALL_THE_QGL_VERSION_OF_glGetDoublev
#define glGetFloatv CALL_THE_QGL_VERSION_OF_glGetFloatv
#define glPushAttrib CALL_THE_QGL_VERSION_OF_glPushAttrib
#define glPopAttrib CALL_THE_QGL_VERSION_OF_glPopAttrib
#define glPushClientAttrib CALL_THE_QGL_VERSION_OF_glPushClientAttrib
#define glPopClientAttrib CALL_THE_QGL_VERSION_OF_glPopClientAttrib
#define glRenderMode CALL_THE_QGL_VERSION_OF_glRenderMode
#define glHint CALL_THE_QGL_VERSION_OF_glHint
#define glClearAccum CALL_THE_QGL_VERSION_OF_glClearAccum
#define glAccum CALL_THE_QGL_VERSION_OF_glAccum
#define glFrustum CALL_THE_QGL_VERSION_OF_glFrustum
#define glPushMatrix CALL_THE_QGL_VERSION_OF_glPushMatrix
#define glPopMatrix CALL_THE_QGL_VERSION_OF_glPopMatrix
#define glLoadMatrixd CALL_THE_QGL_VERSION_OF_glLoadMatrixd
#define glMultMatrixd CALL_THE_QGL_VERSION_OF_glMultMatrixd
#define glMultMatrixf CALL_THE_QGL_VERSION_OF_glMultMatrixf
#define glRotated CALL_THE_QGL_VERSION_OF_glRotated
#define glRotatef CALL_THE_QGL_VERSION_OF_glRotatef
#define glScaled CALL_THE_QGL_VERSION_OF_glScaled
#define glScalef CALL_THE_QGL_VERSION_OF_glScalef
#define glTranslated CALL_THE_QGL_VERSION_OF_glTranslated
#define glTranslatef CALL_THE_QGL_VERSION_OF_glTranslatef
#define glIsList CALL_THE_QGL_VERSION_OF_glIsList
#define glDeleteLists CALL_THE_QGL_VERSION_OF_glDeleteLists
#define glGenLists CALL_THE_QGL_VERSION_OF_glGenLists
#define glNewList CALL_THE_QGL_VERSION_OF_glNewList
#define glEndList CALL_THE_QGL_VERSION_OF_glEndList
#define glCallList CALL_THE_QGL_VERSION_OF_glCallList
#define glCallLists CALL_THE_QGL_VERSION_OF_glCallLists
#define glListBase CALL_THE_QGL_VERSION_OF_glListBase
#define glVertex2d CALL_THE_QGL_VERSION_OF_glVertex2d
#define glVertex2i CALL_THE_QGL_VERSION_OF_glVertex2i
#define glVertex2s CALL_THE_QGL_VERSION_OF_glVertex2s
#define glVertex3d CALL_THE_QGL_VERSION_OF_glVertex3d
#define glVertex3f CALL_THE_QGL_VERSION_OF_glVertex3f
#define glVertex3i CALL_THE_QGL_VERSION_OF_glVertex3i
#define glVertex3s CALL_THE_QGL_VERSION_OF_glVertex3s
#define glVertex4d CALL_THE_QGL_VERSION_OF_glVertex4d
#define glVertex4f CALL_THE_QGL_VERSION_OF_glVertex4f
#define glVertex4i CALL_THE_QGL_VERSION_OF_glVertex4i
#define glVertex4s CALL_THE_QGL_VERSION_OF_glVertex4s
#define glVertex2dv CALL_THE_QGL_VERSION_OF_glVertex2dv
#define glVertex2fv CALL_THE_QGL_VERSION_OF_glVertex2fv
#define glVertex2iv CALL_THE_QGL_VERSION_OF_glVertex2iv
#define glVertex2sv CALL_THE_QGL_VERSION_OF_glVertex2sv
#define glVertex3dv CALL_THE_QGL_VERSION_OF_glVertex3dv
#define glVertex3iv CALL_THE_QGL_VERSION_OF_glVertex3iv
#define glVertex3sv CALL_THE_QGL_VERSION_OF_glVertex3sv
#define glVertex4dv CALL_THE_QGL_VERSION_OF_glVertex4dv
#define glVertex4fv CALL_THE_QGL_VERSION_OF_glVertex4fv
#define glVertex4iv CALL_THE_QGL_VERSION_OF_glVertex4iv
#define glVertex4sv CALL_THE_QGL_VERSION_OF_glVertex4sv
#define glNormal3b CALL_THE_QGL_VERSION_OF_glNormal3b
#define glNormal3d CALL_THE_QGL_VERSION_OF_glNormal3d
#define glNormal3f CALL_THE_QGL_VERSION_OF_glNormal3f
#define glNormal3i CALL_THE_QGL_VERSION_OF_glNormal3i
#define glNormal3s CALL_THE_QGL_VERSION_OF_glNormal3s
#define glNormal3bv CALL_THE_QGL_VERSION_OF_glNormal3bv
#define glNormal3dv CALL_THE_QGL_VERSION_OF_glNormal3dv
#define glNormal3fv CALL_THE_QGL_VERSION_OF_glNormal3fv
#define glNormal3iv CALL_THE_QGL_VERSION_OF_glNormal3iv
#define glNormal3sv CALL_THE_QGL_VERSION_OF_glNormal3sv
#define glIndexd CALL_THE_QGL_VERSION_OF_glIndexd
#define glIndexf CALL_THE_QGL_VERSION_OF_glIndexf
#define glIndexi CALL_THE_QGL_VERSION_OF_glIndexi
#define glIndexs CALL_THE_QGL_VERSION_OF_glIndexs
#define glIndexub CALL_THE_QGL_VERSION_OF_glIndexub
#define glIndexdv CALL_THE_QGL_VERSION_OF_glIndexdv
#define glIndexfv CALL_THE_QGL_VERSION_OF_glIndexfv
#define glIndexiv CALL_THE_QGL_VERSION_OF_glIndexiv
#define glIndexsv CALL_THE_QGL_VERSION_OF_glIndexsv
#define glIndexubv CALL_THE_QGL_VERSION_OF_glIndexubv
#define glColor3b CALL_THE_QGL_VERSION_OF_glColor3b
#define glColor3d CALL_THE_QGL_VERSION_OF_glColor3d
#define glColor3i CALL_THE_QGL_VERSION_OF_glColor3i
#define glColor3s CALL_THE_QGL_VERSION_OF_glColor3s
#define glColor3ub CALL_THE_QGL_VERSION_OF_glColor3ub
#define glColor3ui CALL_THE_QGL_VERSION_OF_glColor3ui
#define glColor3us CALL_THE_QGL_VERSION_OF_glColor3us
#define glColor4b CALL_THE_QGL_VERSION_OF_glColor4b
#define glColor4d CALL_THE_QGL_VERSION_OF_glColor4d
#define glColor4i CALL_THE_QGL_VERSION_OF_glColor4i
#define glColor4s CALL_THE_QGL_VERSION_OF_glColor4s
#define glColor4ub CALL_THE_QGL_VERSION_OF_glColor4ub
#define glColor4ui CALL_THE_QGL_VERSION_OF_glColor4ui
#define glColor4us CALL_THE_QGL_VERSION_OF_glColor4us
#define glColor3bv CALL_THE_QGL_VERSION_OF_glColor3bv
#define glColor3dv CALL_THE_QGL_VERSION_OF_glColor3dv
#define glColor3fv CALL_THE_QGL_VERSION_OF_glColor3fv
#define glColor3iv CALL_THE_QGL_VERSION_OF_glColor3iv
#define glColor3sv CALL_THE_QGL_VERSION_OF_glColor3sv
#define glColor3ubv CALL_THE_QGL_VERSION_OF_glColor3ubv
#define glColor3uiv CALL_THE_QGL_VERSION_OF_glColor3uiv
#define glColor3usv CALL_THE_QGL_VERSION_OF_glColor3usv
#define glColor4bv CALL_THE_QGL_VERSION_OF_glColor4bv
#define glColor4dv CALL_THE_QGL_VERSION_OF_glColor4dv
#define glColor4fv CALL_THE_QGL_VERSION_OF_glColor4fv
#define glColor4iv CALL_THE_QGL_VERSION_OF_glColor4iv
#define glColor4sv CALL_THE_QGL_VERSION_OF_glColor4sv
#define glColor4uiv CALL_THE_QGL_VERSION_OF_glColor4uiv
#define glColor4usv CALL_THE_QGL_VERSION_OF_glColor4usv
#define glTexCoord1d CALL_THE_QGL_VERSION_OF_glTexCoord1d
#define glTexCoord1f CALL_THE_QGL_VERSION_OF_glTexCoord1f
#define glTexCoord1i CALL_THE_QGL_VERSION_OF_glTexCoord1i
#define glTexCoord1s CALL_THE_QGL_VERSION_OF_glTexCoord1s
#define glTexCoord2d CALL_THE_QGL_VERSION_OF_glTexCoord2d
#define glTexCoord2i CALL_THE_QGL_VERSION_OF_glTexCoord2i
#define glTexCoord2s CALL_THE_QGL_VERSION_OF_glTexCoord2s
#define glTexCoord3d CALL_THE_QGL_VERSION_OF_glTexCoord3d
#define glTexCoord3f CALL_THE_QGL_VERSION_OF_glTexCoord3f
#define glTexCoord3i CALL_THE_QGL_VERSION_OF_glTexCoord3i
#define glTexCoord3s CALL_THE_QGL_VERSION_OF_glTexCoord3s
#define glTexCoord4d CALL_THE_QGL_VERSION_OF_glTexCoord4d
#define glTexCoord4f CALL_THE_QGL_VERSION_OF_glTexCoord4f
#define glTexCoord4i CALL_THE_QGL_VERSION_OF_glTexCoord4i
#define glTexCoord4s CALL_THE_QGL_VERSION_OF_glTexCoord4s
#define glTexCoord1dv CALL_THE_QGL_VERSION_OF_glTexCoord1dv
#define glTexCoord1fv CALL_THE_QGL_VERSION_OF_glTexCoord1fv
#define glTexCoord1iv CALL_THE_QGL_VERSION_OF_glTexCoord1iv
#define glTexCoord1sv CALL_THE_QGL_VERSION_OF_glTexCoord1sv
#define glTexCoord2dv CALL_THE_QGL_VERSION_OF_glTexCoord2dv
#define glTexCoord2iv CALL_THE_QGL_VERSION_OF_glTexCoord2iv
#define glTexCoord2sv CALL_THE_QGL_VERSION_OF_glTexCoord2sv
#define glTexCoord3dv CALL_THE_QGL_VERSION_OF_glTexCoord3dv
#define glTexCoord3fv CALL_THE_QGL_VERSION_OF_glTexCoord3fv
#define glTexCoord3iv CALL_THE_QGL_VERSION_OF_glTexCoord3iv
#define glTexCoord3sv CALL_THE_QGL_VERSION_OF_glTexCoord3sv
#define glTexCoord4dv CALL_THE_QGL_VERSION_OF_glTexCoord4dv
#define glTexCoord4fv CALL_THE_QGL_VERSION_OF_glTexCoord4fv
#define glTexCoord4iv CALL_THE_QGL_VERSION_OF_glTexCoord4iv
#define glTexCoord4sv CALL_THE_QGL_VERSION_OF_glTexCoord4sv
#define glRasterPos2d CALL_THE_QGL_VERSION_OF_glRasterPos2d
#define glRasterPos2f CALL_THE_QGL_VERSION_OF_glRasterPos2f
#define glRasterPos2i CALL_THE_QGL_VERSION_OF_glRasterPos2i
#define glRasterPos2s CALL_THE_QGL_VERSION_OF_glRasterPos2s
#define glRasterPos3d CALL_THE_QGL_VERSION_OF_glRasterPos3d
#define glRasterPos3f CALL_THE_QGL_VERSION_OF_glRasterPos3f
#define glRasterPos3i CALL_THE_QGL_VERSION_OF_glRasterPos3i
#define glRasterPos3s CALL_THE_QGL_VERSION_OF_glRasterPos3s
#define glRasterPos4d CALL_THE_QGL_VERSION_OF_glRasterPos4d
#define glRasterPos4f CALL_THE_QGL_VERSION_OF_glRasterPos4f
#define glRasterPos4i CALL_THE_QGL_VERSION_OF_glRasterPos4i
#define glRasterPos4s CALL_THE_QGL_VERSION_OF_glRasterPos4s
#define glRasterPos2dv CALL_THE_QGL_VERSION_OF_glRasterPos2dv
#define glRasterPos2fv CALL_THE_QGL_VERSION_OF_glRasterPos2fv
#define glRasterPos2iv CALL_THE_QGL_VERSION_OF_glRasterPos2iv
#define glRasterPos2sv CALL_THE_QGL_VERSION_OF_glRasterPos2sv
#define glRasterPos3dv CALL_THE_QGL_VERSION_OF_glRasterPos3dv
#define glRasterPos3fv CALL_THE_QGL_VERSION_OF_glRasterPos3fv
#define glRasterPos3iv CALL_THE_QGL_VERSION_OF_glRasterPos3iv
#define glRasterPos3sv CALL_THE_QGL_VERSION_OF_glRasterPos3sv
#define glRasterPos4dv CALL_THE_QGL_VERSION_OF_glRasterPos4dv
#define glRasterPos4fv CALL_THE_QGL_VERSION_OF_glRasterPos4fv
#define glRasterPos4iv CALL_THE_QGL_VERSION_OF_glRasterPos4iv
#define glRasterPos4sv CALL_THE_QGL_VERSION_OF_glRasterPos4sv
#define glRectd CALL_THE_QGL_VERSION_OF_glRectd
#define glRectf CALL_THE_QGL_VERSION_OF_glRectf
#define glRecti CALL_THE_QGL_VERSION_OF_glRecti
#define glRects CALL_THE_QGL_VERSION_OF_glRects
#define glRectdv CALL_THE_QGL_VERSION_OF_glRectdv
#define glRectfv CALL_THE_QGL_VERSION_OF_glRectfv
#define glRectiv CALL_THE_QGL_VERSION_OF_glRectiv
#define glRectsv CALL_THE_QGL_VERSION_OF_glRectsv
#define glNormalPointer CALL_THE_QGL_VERSION_OF_glNormalPointer
#define glIndexPointer CALL_THE_QGL_VERSION_OF_glIndexPointer
#define glEdgeFlagPointer CALL_THE_QGL_VERSION_OF_glEdgeFlagPointer
#define glGetPointerv CALL_THE_QGL_VERSION_OF_glGetPointerv
#define glDrawArrays CALL_THE_QGL_VERSION_OF_glDrawArrays
#define glInterleavedArrays CALL_THE_QGL_VERSION_OF_glInterleavedArrays
#define glLightf CALL_THE_QGL_VERSION_OF_glLightf
#define glLighti CALL_THE_QGL_VERSION_OF_glLighti
#define glLightfv CALL_THE_QGL_VERSION_OF_glLightfv
#define glLightiv CALL_THE_QGL_VERSION_OF_glLightiv
#define glGetLightfv CALL_THE_QGL_VERSION_OF_glGetLightfv
#define glGetLightiv CALL_THE_QGL_VERSION_OF_glGetLightiv
#define glLightModelf CALL_THE_QGL_VERSION_OF_glLightModelf
#define glLightModeli CALL_THE_QGL_VERSION_OF_glLightModeli
#define glLightModelfv CALL_THE_QGL_VERSION_OF_glLightModelfv
#define glLightModeliv CALL_THE_QGL_VERSION_OF_glLightModeliv
#define glMaterialf CALL_THE_QGL_VERSION_OF_glMaterialf
#define glMateriali CALL_THE_QGL_VERSION_OF_glMateriali
#define glMaterialfv CALL_THE_QGL_VERSION_OF_glMaterialfv
#define glMaterialiv CALL_THE_QGL_VERSION_OF_glMaterialiv
#define glGetMaterialfv CALL_THE_QGL_VERSION_OF_glGetMaterialfv
#define glGetMaterialiv CALL_THE_QGL_VERSION_OF_glGetMaterialiv
#define glColorMaterial CALL_THE_QGL_VERSION_OF_glColorMaterial
#define glPixelZoom CALL_THE_QGL_VERSION_OF_glPixelZoom
#define glPixelStoref CALL_THE_QGL_VERSION_OF_glPixelStoref
#define glPixelStorei CALL_THE_QGL_VERSION_OF_glPixelStorei
#define glPixelTransferf CALL_THE_QGL_VERSION_OF_glPixelTransferf
#define glPixelTransferi CALL_THE_QGL_VERSION_OF_glPixelTransferi
#define glPixelMapfv CALL_THE_QGL_VERSION_OF_glPixelMapfv
#define glPixelMapuiv CALL_THE_QGL_VERSION_OF_glPixelMapuiv
#define glPixelMapusv CALL_THE_QGL_VERSION_OF_glPixelMapusv
#define glGetPixelMapfv CALL_THE_QGL_VERSION_OF_glGetPixelMapfv
#define glGetPixelMapuiv CALL_THE_QGL_VERSION_OF_glGetPixelMapuiv
#define glGetPixelMapusv CALL_THE_QGL_VERSION_OF_glGetPixelMapusv
#define glBitmap CALL_THE_QGL_VERSION_OF_glBitmap
#define glReadPixels CALL_THE_QGL_VERSION_OF_glReadPixels
#define glDrawPixels CALL_THE_QGL_VERSION_OF_glDrawPixels
#define glCopyPixels CALL_THE_QGL_VERSION_OF_glCopyPixels
#define glStencilFunc CALL_THE_QGL_VERSION_OF_glStencilFunc
#define glStencilMask CALL_THE_QGL_VERSION_OF_glStencilMask
#define glStencilOp CALL_THE_QGL_VERSION_OF_glStencilOp
#define glClearStencil CALL_THE_QGL_VERSION_OF_glClearStencil
#define glTexGend CALL_THE_QGL_VERSION_OF_glTexGend
#define glTexGenf CALL_THE_QGL_VERSION_OF_glTexGenf
#define glTexGeni CALL_THE_QGL_VERSION_OF_glTexGeni
#define glTexGendv CALL_THE_QGL_VERSION_OF_glTexGendv
#define glTexGenfv CALL_THE_QGL_VERSION_OF_glTexGenfv
#define glTexGeniv CALL_THE_QGL_VERSION_OF_glTexGeniv
#define glGetTexGendv CALL_THE_QGL_VERSION_OF_glGetTexGendv
#define glGetTexGenfv CALL_THE_QGL_VERSION_OF_glGetTexGenfv
#define glGetTexGeniv CALL_THE_QGL_VERSION_OF_glGetTexGeniv
#define glTexEnvi CALL_THE_QGL_VERSION_OF_glTexEnvi
#define glTexEnvfv CALL_THE_QGL_VERSION_OF_glTexEnvfv
#define glTexEnviv CALL_THE_QGL_VERSION_OF_glTexEnviv
#define glGetTexEnvfv CALL_THE_QGL_VERSION_OF_glGetTexEnvfv
#define glGetTexEnviv CALL_THE_QGL_VERSION_OF_glGetTexEnviv
#define glTexParameteri CALL_THE_QGL_VERSION_OF_glTexParameteri
#define glTexParameteriv CALL_THE_QGL_VERSION_OF_glTexParameteriv
#define glGetTexParameterfv CALL_THE_QGL_VERSION_OF_glGetTexParameterfv
#define glGetTexParameteriv CALL_THE_QGL_VERSION_OF_glGetTexParameteriv
#define glGetTexLevelParameterfv CALL_THE_QGL_VERSION_OF_glGetTexLevelParameterfv
#define glGetTexLevelParameteriv CALL_THE_QGL_VERSION_OF_glGetTexLevelParameteriv
#define glTexImage1D CALL_THE_QGL_VERSION_OF_glTexImage1D
#define glGetTexImage CALL_THE_QGL_VERSION_OF_glGetTexImage
#define glGenTextures CALL_THE_QGL_VERSION_OF_glGenTextures
#define glDeleteTextures CALL_THE_QGL_VERSION_OF_glDeleteTextures
#define glPrioritizeTextures CALL_THE_QGL_VERSION_OF_glPrioritizeTextures
#define glAreTexturesResident CALL_THE_QGL_VERSION_OF_glAreTexturesResident
#define glIsTexture CALL_THE_QGL_VERSION_OF_glIsTexture
#define glTexSubImage1D CALL_THE_QGL_VERSION_OF_glTexSubImage1D
#define glCopyTexImage1D CALL_THE_QGL_VERSION_OF_glCopyTexImage1D
#define glCopyTexImage2D CALL_THE_QGL_VERSION_OF_glCopyTexImage2D
#define glCopyTexSubImage1D CALL_THE_QGL_VERSION_OF_glCopyTexSubImage1D
#define glCopyTexSubImage2D CALL_THE_QGL_VERSION_OF_glCopyTexSubImage2D
#define glMap1d CALL_THE_QGL_VERSION_OF_glMap1d
#define glMap1f CALL_THE_QGL_VERSION_OF_glMap1f
#define glMap2d CALL_THE_QGL_VERSION_OF_glMap2d
#define glMap2f CALL_THE_QGL_VERSION_OF_glMap2f
#define glGetMapdv CALL_THE_QGL_VERSION_OF_glGetMapdv
#define glGetMapfv CALL_THE_QGL_VERSION_OF_glGetMapfv
#define glGetMapiv CALL_THE_QGL_VERSION_OF_glGetMapiv
#define glEvalCoord1d CALL_THE_QGL_VERSION_OF_glEvalCoord1d
#define glEvalCoord1f CALL_THE_QGL_VERSION_OF_glEvalCoord1f
#define glEvalCoord1dv CALL_THE_QGL_VERSION_OF_glEvalCoord1dv
#define glEvalCoord1fv CALL_THE_QGL_VERSION_OF_glEvalCoord1fv
#define glEvalCoord2d CALL_THE_QGL_VERSION_OF_glEvalCoord2d
#define glEvalCoord2f CALL_THE_QGL_VERSION_OF_glEvalCoord2f
#define glEvalCoord2dv CALL_THE_QGL_VERSION_OF_glEvalCoord2dv
#define glEvalCoord2fv CALL_THE_QGL_VERSION_OF_glEvalCoord2fv
#define glMapGrid1d CALL_THE_QGL_VERSION_OF_glMapGrid1d
#define glMapGrid1f CALL_THE_QGL_VERSION_OF_glMapGrid1f
#define glMapGrid2d CALL_THE_QGL_VERSION_OF_glMapGrid2d
#define glMapGrid2f CALL_THE_QGL_VERSION_OF_glMapGrid2f
#define glEvalPoint1 CALL_THE_QGL_VERSION_OF_glEvalPoint1
#define glEvalPoint2 CALL_THE_QGL_VERSION_OF_glEvalPoint2
#define glEvalMesh1 CALL_THE_QGL_VERSION_OF_glEvalMesh1
#define glEvalMesh2 CALL_THE_QGL_VERSION_OF_glEvalMesh2
#define glFogf CALL_THE_QGL_VERSION_OF_glFogf
#define glFogi CALL_THE_QGL_VERSION_OF_glFogi
#define glFogfv CALL_THE_QGL_VERSION_OF_glFogfv
#define glFogiv CALL_THE_QGL_VERSION_OF_glFogiv
#define glFeedbackBuffer CALL_THE_QGL_VERSION_OF_glFeedbackBuffer
#define glPassThrough CALL_THE_QGL_VERSION_OF_glPassThrough
#define glSelectBuffer CALL_THE_QGL_VERSION_OF_glSelectBuffer
#define glInitNames CALL_THE_QGL_VERSION_OF_glInitNames
#define glLoadName CALL_THE_QGL_VERSION_OF_glLoadName
#define glPushName CALL_THE_QGL_VERSION_OF_glPushName
#define glPopName CALL_THE_QGL_VERSION_OF_glPopName
#define glDrawRangeElements CALL_THE_QGL_VERSION_OF_glDrawRangeElements
#define glTexImage3D CALL_THE_QGL_VERSION_OF_glTexImage3D
#define glTexSubImage3D CALL_THE_QGL_VERSION_OF_glTexSubImage3D
#define glCopyTexSubImage3D CALL_THE_QGL_VERSION_OF_glCopyTexSubImage3D
#define glColorTable CALL_THE_QGL_VERSION_OF_glColorTable
#define glColorSubTable CALL_THE_QGL_VERSION_OF_glColorSubTable
#define glColorTableParameteriv CALL_THE_QGL_VERSION_OF_glColorTableParameteriv
#define glColorTableParameterfv CALL_THE_QGL_VERSION_OF_glColorTableParameterfv
#define glCopyColorSubTable CALL_THE_QGL_VERSION_OF_glCopyColorSubTable
#define glCopyColorTable CALL_THE_QGL_VERSION_OF_glCopyColorTable
#define glGetColorTable CALL_THE_QGL_VERSION_OF_glGetColorTable
#define glGetColorTableParameterfv CALL_THE_QGL_VERSION_OF_glGetColorTableParameterfv
#define glGetColorTableParameteriv CALL_THE_QGL_VERSION_OF_glGetColorTableParameteriv
#define glBlendEquation CALL_THE_QGL_VERSION_OF_glBlendEquation
#define glBlendColor CALL_THE_QGL_VERSION_OF_glBlendColor
#define glHistogram CALL_THE_QGL_VERSION_OF_glHistogram
#define glResetHistogram CALL_THE_QGL_VERSION_OF_glResetHistogram
#define glGetHistogram CALL_THE_QGL_VERSION_OF_glGetHistogram
#define glGetHistogramParameterfv CALL_THE_QGL_VERSION_OF_glGetHistogramParameterfv
#define glGetHistogramParameteriv CALL_THE_QGL_VERSION_OF_glGetHistogramParameteriv
#define glMinmax CALL_THE_QGL_VERSION_OF_glMinmax
#define glResetMinmax CALL_THE_QGL_VERSION_OF_glResetMinmax
#define glGetMinmax CALL_THE_QGL_VERSION_OF_glGetMinmax
#define glGetMinmaxParameterfv CALL_THE_QGL_VERSION_OF_glGetMinmaxParameterfv
#define glGetMinmaxParameteriv CALL_THE_QGL_VERSION_OF_glGetMinmaxParameteriv
#define glConvolutionFilter1D CALL_THE_QGL_VERSION_OF_glConvolutionFilter1D
#define glConvolutionFilter2D CALL_THE_QGL_VERSION_OF_glConvolutionFilter2D
#define glConvolutionParameterf CALL_THE_QGL_VERSION_OF_glConvolutionParameterf
#define glConvolutionParameterfv CALL_THE_QGL_VERSION_OF_glConvolutionParameterfv
#define glConvolutionParameteri CALL_THE_QGL_VERSION_OF_glConvolutionParameteri
#define glConvolutionParameteriv CALL_THE_QGL_VERSION_OF_glConvolutionParameteriv
#define glCopyConvolutionFilter1D CALL_THE_QGL_VERSION_OF_glCopyConvolutionFilter1D
#define glCopyConvolutionFilter2D CALL_THE_QGL_VERSION_OF_glCopyConvolutionFilter2D
#define glGetConvolutionFilter CALL_THE_QGL_VERSION_OF_glGetConvolutionFilter
#define glGetConvolutionParameterfv CALL_THE_QGL_VERSION_OF_glGetConvolutionParameterfv
#define glGetConvolutionParameteriv CALL_THE_QGL_VERSION_OF_glGetConvolutionParameteriv
#define glSeparableFilter2D CALL_THE_QGL_VERSION_OF_glSeparableFilter2D
#define glGetSeparableFilter CALL_THE_QGL_VERSION_OF_glGetSeparableFilter
#define glActiveTexture CALL_THE_QGL_VERSION_OF_glActiveTexture
#define glClientActiveTexture CALL_THE_QGL_VERSION_OF_glClientActiveTexture
#define glCompressedTexImage1D CALL_THE_QGL_VERSION_OF_glCompressedTexImage1D
#define glCompressedTexImage2D CALL_THE_QGL_VERSION_OF_glCompressedTexImage2D
#define glCompressedTexImage3D CALL_THE_QGL_VERSION_OF_glCompressedTexImage3D
#define glCompressedTexSubImage1D CALL_THE_QGL_VERSION_OF_glCompressedTexSubImage1D
#define glCompressedTexSubImage2D CALL_THE_QGL_VERSION_OF_glCompressedTexSubImage2D
#define glCompressedTexSubImage3D CALL_THE_QGL_VERSION_OF_glCompressedTexSubImage3D
#define glGetCompressedTexImage CALL_THE_QGL_VERSION_OF_glGetCompressedTexImage
#define glMultiTexCoord1d CALL_THE_QGL_VERSION_OF_glMultiTexCoord1d
#define glMultiTexCoord1dv CALL_THE_QGL_VERSION_OF_glMultiTexCoord1dv
#define glMultiTexCoord1f CALL_THE_QGL_VERSION_OF_glMultiTexCoord1f
#define glMultiTexCoord1fv CALL_THE_QGL_VERSION_OF_glMultiTexCoord1fv
#define glMultiTexCoord1i CALL_THE_QGL_VERSION_OF_glMultiTexCoord1i
#define glMultiTexCoord1iv CALL_THE_QGL_VERSION_OF_glMultiTexCoord1iv
#define glMultiTexCoord1s CALL_THE_QGL_VERSION_OF_glMultiTexCoord1s
#define glMultiTexCoord1sv CALL_THE_QGL_VERSION_OF_glMultiTexCoord1sv
#define glMultiTexCoord2d CALL_THE_QGL_VERSION_OF_glMultiTexCoord2d
#define glMultiTexCoord2dv CALL_THE_QGL_VERSION_OF_glMultiTexCoord2dv
#define glMultiTexCoord2f CALL_THE_QGL_VERSION_OF_glMultiTexCoord2f
#define glMultiTexCoord2fv CALL_THE_QGL_VERSION_OF_glMultiTexCoord2fv
#define glMultiTexCoord2i CALL_THE_QGL_VERSION_OF_glMultiTexCoord2i
#define glMultiTexCoord2iv CALL_THE_QGL_VERSION_OF_glMultiTexCoord2iv
#define glMultiTexCoord2s CALL_THE_QGL_VERSION_OF_glMultiTexCoord2s
#define glMultiTexCoord2sv CALL_THE_QGL_VERSION_OF_glMultiTexCoord2sv
#define glMultiTexCoord3d CALL_THE_QGL_VERSION_OF_glMultiTexCoord3d
#define glMultiTexCoord3dv CALL_THE_QGL_VERSION_OF_glMultiTexCoord3dv
#define glMultiTexCoord3f CALL_THE_QGL_VERSION_OF_glMultiTexCoord3f
#define glMultiTexCoord3fv CALL_THE_QGL_VERSION_OF_glMultiTexCoord3fv
#define glMultiTexCoord3i CALL_THE_QGL_VERSION_OF_glMultiTexCoord3i
#define glMultiTexCoord3iv CALL_THE_QGL_VERSION_OF_glMultiTexCoord3iv
#define glMultiTexCoord3s CALL_THE_QGL_VERSION_OF_glMultiTexCoord3s
#define glMultiTexCoord3sv CALL_THE_QGL_VERSION_OF_glMultiTexCoord3sv
#define glMultiTexCoord4d CALL_THE_QGL_VERSION_OF_glMultiTexCoord4d
#define glMultiTexCoord4dv CALL_THE_QGL_VERSION_OF_glMultiTexCoord4dv
#define glMultiTexCoord4f CALL_THE_QGL_VERSION_OF_glMultiTexCoord4f
#define glMultiTexCoord4fv CALL_THE_QGL_VERSION_OF_glMultiTexCoord4fv
#define glMultiTexCoord4i CALL_THE_QGL_VERSION_OF_glMultiTexCoord4i
#define glMultiTexCoord4iv CALL_THE_QGL_VERSION_OF_glMultiTexCoord4iv
#define glMultiTexCoord4s CALL_THE_QGL_VERSION_OF_glMultiTexCoord4s
#define glMultiTexCoord4sv CALL_THE_QGL_VERSION_OF_glMultiTexCoord4sv
#define glLoadTransposeMatrixd CALL_THE_QGL_VERSION_OF_glLoadTransposeMatrixd
#define glLoadTransposeMatrixf CALL_THE_QGL_VERSION_OF_glLoadTransposeMatrixf
#define glMultTransposeMatrixd CALL_THE_QGL_VERSION_OF_glMultTransposeMatrixd
#define glMultTransposeMatrixf CALL_THE_QGL_VERSION_OF_glMultTransposeMatrixf
#define glSampleCoverage CALL_THE_QGL_VERSION_OF_glSampleCoverage
